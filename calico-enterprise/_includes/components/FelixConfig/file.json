{
  "Comment": "This file generated by calico-felix-docgen, DO NOT EDIT.",
  "Groups": [
    {
      "Name": "Datastore connection",
      "Fields": [
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "DatastoreType",
          "NameEnvVar": "FELIX_DatastoreType",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "One of: `etcdv3`, `kubernetes` (case insensitive)",
          "StringSchemaHTML": "One of: <code>etcdv3</code>, <code>kubernetes</code> (case insensitive)",
          "StringDefault": "etcdv3",
          "ParsedDefault": "etcdv3",
          "ParsedDefaultJSON": "\"etcdv3\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Controls which datastore driver Felix will use. Typically, this is detected from the environment\nand it does not need to be set manually. (For example, if `KUBECONFIG` is set, the kubernetes datastore driver\nwill be used by default).",
          "DescriptionHTML": "<p>Controls which datastore driver Felix will use. Typically, this is detected from the environment\nand it does not need to be set manually. (For example, if <code>KUBECONFIG</code> is set, the kubernetes datastore driver\nwill be used by default).</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdAddr",
          "NameEnvVar": "FELIX_EtcdAddr",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String matching regex `^[^:/]+:\\d+$`",
          "StringSchemaHTML": "String matching regex <code>^[^:/]+:\\d+$</code>",
          "StringDefault": "127.0.0.1:2379",
          "ParsedDefault": "127.0.0.1:2379",
          "ParsedDefaultJSON": "\"127.0.0.1:2379\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "**Open source-only parameter**; `etcdv3` datastore driver is not supported in Calico Enterprise/Cloud.\n\nWhen using the `etcdv3` datastore driver, the etcd server and port to connect to. If EtcdEndpoints\nis also specified, it takes precedence.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; <code>etcdv3</code> datastore driver is not supported in Calico Enterprise/Cloud.</p>\n<p>When using the <code>etcdv3</code> datastore driver, the etcd server and port to connect to. If EtcdEndpoints\nis also specified, it takes precedence.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": true
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdCaFile",
          "NameEnvVar": "FELIX_EtcdCaFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "**Open source-only parameter**; `etcdv3` datastore driver is not supported in Calico Enterprise/Cloud.\n\nWhen using the `etcdv3` datastore driver, path to TLS CA file to use when connecting to\netcd. If the CA file is specified, the other TLS parameters are mandatory.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; <code>etcdv3</code> datastore driver is not supported in Calico Enterprise/Cloud.</p>\n<p>When using the <code>etcdv3</code> datastore driver, path to TLS CA file to use when connecting to\netcd. If the CA file is specified, the other TLS parameters are mandatory.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": true
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdCertFile",
          "NameEnvVar": "FELIX_EtcdCertFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "**Open source-only parameter**; `etcdv3` datastore driver is not supported in Calico Enterprise/Cloud.\n\nWhen using the `etcdv3` datastore driver, path to TLS certificate file to use when connecting to\netcd. If the certificate file is specified, the other TLS parameters are mandatory.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; <code>etcdv3</code> datastore driver is not supported in Calico Enterprise/Cloud.</p>\n<p>When using the <code>etcdv3</code> datastore driver, path to TLS certificate file to use when connecting to\netcd. If the certificate file is specified, the other TLS parameters are mandatory.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": true
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdEndpoints",
          "NameEnvVar": "FELIX_EtcdEndpoints",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "List of HTTP endpoints: comma-delimited list of `http(s)://hostname:port`",
          "StringSchemaHTML": "List of HTTP endpoints: comma-delimited list of <code>http(s)://hostname:port</code>",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "[]string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "**Open source-only parameter**; `etcdv3` datastore driver is not supported in Calico Enterprise/Cloud.\n\nWhen using the `etcdv3` datastore driver, comma-delimited list of etcd endpoints to connect to,\nreplaces EtcdAddr and EtcdScheme.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; <code>etcdv3</code> datastore driver is not supported in Calico Enterprise/Cloud.</p>\n<p>When using the <code>etcdv3</code> datastore driver, comma-delimited list of etcd endpoints to connect to,\nreplaces EtcdAddr and EtcdScheme.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": true
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdKeyFile",
          "NameEnvVar": "FELIX_EtcdKeyFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "**Open source-only parameter**; `etcdv3` datastore driver is not supported in Calico Enterprise/Cloud.\n\nWhen using the `etcdv3` datastore driver, path to TLS private key file to use when connecting to\netcd. If the key file is specified, the other TLS parameters are mandatory.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; <code>etcdv3</code> datastore driver is not supported in Calico Enterprise/Cloud.</p>\n<p>When using the <code>etcdv3</code> datastore driver, path to TLS private key file to use when connecting to\netcd. If the key file is specified, the other TLS parameters are mandatory.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": true
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "EtcdScheme",
          "NameEnvVar": "FELIX_EtcdScheme",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "One of: `http`, `https` (case insensitive)",
          "StringSchemaHTML": "One of: <code>http</code>, <code>https</code> (case insensitive)",
          "StringDefault": "http",
          "ParsedDefault": "http",
          "ParsedDefaultJSON": "\"http\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "**Open source-only parameter**; `etcdv3` datastore driver is not supported in Calico Enterprise/Cloud.\n\nEtcdAddr: when using the `etcdv3` datastore driver, the URL scheme to use. If EtcdEndpoints\nis also specified, it takes precedence.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; <code>etcdv3</code> datastore driver is not supported in Calico Enterprise/Cloud.</p>\n<p>EtcdAddr: when using the <code>etcdv3</code> datastore driver, the URL scheme to use. If EtcdEndpoints\nis also specified, it takes precedence.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": true
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "FelixHostname",
          "NameEnvVar": "FELIX_FelixHostname",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String matching regex `^[a-zA-Z0-9_.-]+$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9_.-]+$</code>",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "The name of this node, used to identify resources in the datastore that belong to this node.\nAuto-detected from the node's hostname if not provided.",
          "DescriptionHTML": "<p>The name of this node, used to identify resources in the datastore that belong to this node.\nAuto-detected from the node's hostname if not provided.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaAddr",
          "NameEnvVar": "FELIX_TyphaAddr",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String matching regex `^[^:/]+:\\d+$`",
          "StringSchemaHTML": "String matching regex <code>^[^:/]+:\\d+$</code>",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "If set, tells Felix to connect to Typha at the given address and port. Overrides TyphaK8sServiceName.",
          "DescriptionHTML": "<p>If set, tells Felix to connect to Typha at the given address and port. Overrides TyphaK8sServiceName.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaCAFile",
          "NameEnvVar": "FELIX_TyphaCAFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Path to the TLS CA file to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.",
          "DescriptionHTML": "<p>Path to the TLS CA file to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaCN",
          "NameEnvVar": "FELIX_TyphaCN",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Common name to use when authenticating to Typha over TLS. If any TLS parameters are specified then one of\nTyphaCN and TyphaURISAN must be set.",
          "DescriptionHTML": "<p>Common name to use when authenticating to Typha over TLS. If any TLS parameters are specified then one of\nTyphaCN and TyphaURISAN must be set.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaCertFile",
          "NameEnvVar": "FELIX_TyphaCertFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Path to the TLS certificate to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.",
          "DescriptionHTML": "<p>Path to the TLS certificate to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaK8sNamespace",
          "NameEnvVar": "FELIX_TyphaK8sNamespace",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "kube-system",
          "ParsedDefault": "kube-system",
          "ParsedDefaultJSON": "\"kube-system\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Namespace to look in when looking for Typha's service (see TyphaK8sServiceName).",
          "DescriptionHTML": "<p>Namespace to look in when looking for Typha's service (see TyphaK8sServiceName).</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaK8sServiceName",
          "NameEnvVar": "FELIX_TyphaK8sServiceName",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "If set, tells Felix to connect to Typha by looking up the Endpoints of the given Kubernetes\nService in namespace specified by TyphaK8sNamespace.",
          "DescriptionHTML": "<p>If set, tells Felix to connect to Typha by looking up the Endpoints of the given Kubernetes\nService in namespace specified by TyphaK8sNamespace.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaKeyFile",
          "NameEnvVar": "FELIX_TyphaKeyFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Path to the TLS private key to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.",
          "DescriptionHTML": "<p>Path to the TLS private key to use when communicating with Typha. If this parameter is specified,\nthe other TLS parameters must also be specified.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaReadTimeout",
          "NameEnvVar": "FELIX_TyphaReadTimeout",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "30",
          "ParsedDefault": "30s",
          "ParsedDefaultJSON": "30000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Read timeout when reading from the Typha connection. If typha sends no data for this long,\nFelix will exit and restart. (Note that Typha sends regular pings so traffic is always expected.)",
          "DescriptionHTML": "<p>Read timeout when reading from the Typha connection. If typha sends no data for this long,\nFelix will exit and restart. (Note that Typha sends regular pings so traffic is always expected.)</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaURISAN",
          "NameEnvVar": "FELIX_TyphaURISAN",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "URI SAN to use when authenticating to Typha over TLS. If any TLS parameters are specified then one of\nTyphaCN and TyphaURISAN must be set.",
          "DescriptionHTML": "<p>URI SAN to use when authenticating to Typha over TLS. If any TLS parameters are specified then one of\nTyphaCN and TyphaURISAN must be set.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Datastore connection",
          "GroupWithSortPrefix": "00 Datastore connection",
          "NameConfigFile": "TyphaWriteTimeout",
          "NameEnvVar": "FELIX_TyphaWriteTimeout",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "10",
          "ParsedDefault": "10s",
          "ParsedDefaultJSON": "10000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Write timeout when writing data to Typha.",
          "DescriptionHTML": "<p>Write timeout when writing data to Typha.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Process: Feature detection/overrides",
      "Fields": [
        {
          "Group": "Process: Feature detection/overrides",
          "GroupWithSortPrefix": "00 Process: Feature detection/overrides",
          "NameConfigFile": "FeatureDetectOverride",
          "NameEnvVar": "FELIX_FeatureDetectOverride",
          "NameYAML": "featureDetectOverride",
          "NameGoAPI": "FeatureDetectOverride",
          "StringSchema": "Comma-delimited list of key=value pairs",
          "StringSchemaHTML": "Comma-delimited list of key=value pairs",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "map[string]string",
          "YAMLType": "string",
          "YAMLSchema": "String matching the regular expression `^([a-zA-Z0-9-_]+=(true|false|),)*([a-zA-Z0-9-_]+=(true|false|))?$`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String matching the regular expression <code>^([a-zA-Z0-9-_]+=(true|false|),)*([a-zA-Z0-9-_]+=(true|false|))?$</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to override feature detection based on auto-detected platform capabilities. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". A value of \"true\" or \"false\" will force enable/disable feature, empty or omitted values fall back to auto-detection.",
          "DescriptionHTML": "<p>Used to override feature detection based on auto-detected platform capabilities. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". A value of \"true\" or \"false\" will force enable/disable feature, empty or omitted values fall back to auto-detection.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Feature detection/overrides",
          "GroupWithSortPrefix": "00 Process: Feature detection/overrides",
          "NameConfigFile": "FeatureGates",
          "NameEnvVar": "FELIX_FeatureGates",
          "NameYAML": "featureGates",
          "NameGoAPI": "FeatureGates",
          "StringSchema": "Comma-delimited list of key=value pairs",
          "StringSchemaHTML": "Comma-delimited list of key=value pairs",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "map[string]string",
          "YAMLType": "string",
          "YAMLSchema": "String matching the regular expression `^([a-zA-Z0-9-_]+=([^=]+),)*([a-zA-Z0-9-_]+=([^=]+))?$`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String matching the regular expression <code>^([a-zA-Z0-9-_]+=([^=]+),)*([a-zA-Z0-9-_]+=([^=]+))?$</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to enable or disable tech-preview Calico features. Values are specified in a comma separated list with no spaces, example; \"BPFConnectTimeLoadBalancingWorkaround=enabled,XyZ=false\". This is used to enable features that are not fully production ready.",
          "DescriptionHTML": "<p>Used to enable or disable tech-preview Calico features. Values are specified in a comma separated list with no spaces, example; \"BPFConnectTimeLoadBalancingWorkaround=enabled,XyZ=false\". This is used to enable features that are not fully production ready.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Process: Go runtime",
      "Fields": [
        {
          "Group": "Process: Go runtime",
          "GroupWithSortPrefix": "00 Process: Go runtime",
          "NameConfigFile": "GoGCThreshold",
          "NameEnvVar": "FELIX_GoGCThreshold",
          "NameYAML": "goGCThreshold",
          "NameGoAPI": "GoGCThreshold",
          "StringSchema": "Integer: [-1,2^63-1]",
          "StringSchemaHTML": "Integer: [-1,2<sup>63</sup>-1]",
          "StringDefault": "40",
          "ParsedDefault": "40",
          "ParsedDefaultJSON": "40",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [-1,2^63-1]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [-1,2<sup>63</sup>-1]",
          "YAMLDefault": "40",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the Go runtime's garbage collection threshold. I.e. the percentage that the heap is allowed to grow before garbage collection is triggered. In general, doubling the value halves the CPU time spent doing GC, but it also doubles peak GC memory overhead. A special value of -1 can be used to disable GC entirely; this should only be used in conjunction with the GoMemoryLimitMB setting.\n\nThis setting is overridden by the GOGC environment variable.",
          "DescriptionHTML": "<p>Sets the Go runtime's garbage collection threshold. I.e. the percentage that the heap is allowed to grow before garbage collection is triggered. In general, doubling the value halves the CPU time spent doing GC, but it also doubles peak GC memory overhead. A special value of -1 can be used to disable GC entirely; this should only be used in conjunction with the GoMemoryLimitMB setting.</p>\n<p>This setting is overridden by the GOGC environment variable.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Go runtime",
          "GroupWithSortPrefix": "00 Process: Go runtime",
          "NameConfigFile": "GoMaxProcs",
          "NameEnvVar": "FELIX_GoMaxProcs",
          "NameYAML": "goMaxProcs",
          "NameGoAPI": "GoMaxProcs",
          "StringSchema": "Integer: [-1,2^63-1]",
          "StringSchemaHTML": "Integer: [-1,2<sup>63</sup>-1]",
          "StringDefault": "-1",
          "ParsedDefault": "-1",
          "ParsedDefaultJSON": "-1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [-1,2^63-1]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [-1,2<sup>63</sup>-1]",
          "YAMLDefault": "-1",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the maximum number of CPUs that the Go runtime will use concurrently. A value of -1 means \"use the system default\"; typically the number of real CPUs on the system.\n\nthis setting is overridden by the GOMAXPROCS environment variable.",
          "DescriptionHTML": "<p>Sets the maximum number of CPUs that the Go runtime will use concurrently. A value of -1 means \"use the system default\"; typically the number of real CPUs on the system.</p>\n<p>this setting is overridden by the GOMAXPROCS environment variable.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Go runtime",
          "GroupWithSortPrefix": "00 Process: Go runtime",
          "NameConfigFile": "GoMemoryLimitMB",
          "NameEnvVar": "FELIX_GoMemoryLimitMB",
          "NameYAML": "goMemoryLimitMB",
          "NameGoAPI": "GoMemoryLimitMB",
          "StringSchema": "Integer: [-1,2^63-1]",
          "StringSchemaHTML": "Integer: [-1,2<sup>63</sup>-1]",
          "StringDefault": "-1",
          "ParsedDefault": "-1",
          "ParsedDefaultJSON": "-1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [-1,2^63-1]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [-1,2<sup>63</sup>-1]",
          "YAMLDefault": "-1",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets a (soft) memory limit for the Go runtime in MB. The Go runtime will try to keep its memory usage under the limit by triggering GC as needed. To avoid thrashing, it will exceed the limit if GC starts to take more than 50% of the process's CPU time. A value of -1 disables the memory limit.\n\nNote that the memory limit, if used, must be considerably less than any hard resource limit set at the container or pod level. This is because felix is not the only process that must run in the container or pod.\n\nThis setting is overridden by the GOMEMLIMIT environment variable.",
          "DescriptionHTML": "<p>Sets a (soft) memory limit for the Go runtime in MB. The Go runtime will try to keep its memory usage under the limit by triggering GC as needed. To avoid thrashing, it will exceed the limit if GC starts to take more than 50% of the process's CPU time. A value of -1 disables the memory limit.</p>\n<p>Note that the memory limit, if used, must be considerably less than any hard resource limit set at the container or pod level. This is because felix is not the only process that must run in the container or pod.</p>\n<p>This setting is overridden by the GOMEMLIMIT environment variable.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Process: Health port and timeouts",
      "Fields": [
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthEnabled",
          "NameEnvVar": "FELIX_HealthEnabled",
          "NameYAML": "healthEnabled",
          "NameGoAPI": "HealthEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If set to true, enables Felix's health port, which provides readiness and liveness endpoints.",
          "DescriptionHTML": "<p>If set to true, enables Felix's health port, which provides readiness and liveness endpoints.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthHost",
          "NameEnvVar": "FELIX_HealthHost",
          "NameYAML": "healthHost",
          "NameGoAPI": "HealthHost",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,64}$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9:._+-]{1,64}$</code>",
          "StringDefault": "localhost",
          "ParsedDefault": "localhost",
          "ParsedDefaultJSON": "\"localhost\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "localhost",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The host that the health server should bind to.",
          "DescriptionHTML": "<p>The host that the health server should bind to.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthPort",
          "NameEnvVar": "FELIX_HealthPort",
          "NameYAML": "healthPort",
          "NameGoAPI": "HealthPort",
          "StringSchema": "Integer: [0,65535]",
          "StringSchemaHTML": "Integer: [0,65535]",
          "StringDefault": "9099",
          "ParsedDefault": "9099",
          "ParsedDefaultJSON": "9099",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [0,65535]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [0,65535]",
          "YAMLDefault": "9099",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The TCP port that the health server should bind to.",
          "DescriptionHTML": "<p>The TCP port that the health server should bind to.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Health port and timeouts",
          "GroupWithSortPrefix": "00 Process: Health port and timeouts",
          "NameConfigFile": "HealthTimeoutOverrides",
          "NameEnvVar": "FELIX_HealthTimeoutOverrides",
          "NameYAML": "healthTimeoutOverrides",
          "NameGoAPI": "HealthTimeoutOverrides",
          "StringSchema": "Comma-delimited list of `<key>=<duration>` pairs, where durations use Go's standard format (e.g. 1s, 1m, 1h3m2s)",
          "StringSchemaHTML": "Comma-delimited list of <code>&lt;key&gt;=&lt;duration&gt;</code> pairs, where durations use Go's standard format (e.g. 1s, 1m, 1h3m2s)",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "map[string]time.Duration",
          "YAMLType": "array",
          "YAMLSchema": "List of health timeout overrides: `[{name: \"<name>\", timeout: \"<duration>\"}, ...]` where `<duration>` is in the Go duration format, for example `1m30s`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of health timeout overrides: <code>[{name: \"&lt;name&gt;\", timeout: \"&lt;duration&gt;\"}, ...]</code> where <code>&lt;duration&gt;</code> is in the Go duration format, for example <code>1m30s</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Allows the internal watchdog timeouts of individual subcomponents to be overridden. This is useful for working around \"false positive\" liveness timeouts that can occur in particularly stressful workloads or if CPU is constrained. For a list of active subcomponents, see Felix's logs.",
          "DescriptionHTML": "<p>Allows the internal watchdog timeouts of individual subcomponents to be overridden. This is useful for working around \"false positive\" liveness timeouts that can occur in particularly stressful workloads or if CPU is constrained. For a list of active subcomponents, see Felix's logs.</p>",
          "UserEditable": true,
          "GoType": "[]v3.HealthTimeoutOverride",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Process: Logging",
      "Fields": [
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogDebugFilenameRegex",
          "NameEnvVar": "FELIX_LogDebugFilenameRegex",
          "NameYAML": "logDebugFilenameRegex",
          "NameGoAPI": "LogDebugFilenameRegex",
          "StringSchema": "Regular expression",
          "StringSchemaHTML": "Regular expression",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "null",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which source code files have their Debug log output included in the logs. Only logs from files with names that match the given regular expression are included. The filter only applies to Debug level logs.",
          "DescriptionHTML": "<p>Controls which source code files have their Debug log output included in the logs. Only logs from files with names that match the given regular expression are included. The filter only applies to Debug level logs.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogDropActionOverride",
          "NameEnvVar": "FELIX_LogDropActionOverride",
          "NameYAML": "logDropActionOverride",
          "NameGoAPI": "LogDropActionOverride",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies whether or not to include the DropActionOverride in the logs when it is triggered.",
          "DescriptionHTML": "<p>Specifies whether or not to include the DropActionOverride in the logs when it is triggered.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogFilePath",
          "NameEnvVar": "FELIX_LogFilePath",
          "NameYAML": "logFilePath",
          "NameGoAPI": "LogFilePath",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "/var/log/calico/felix.log",
          "ParsedDefault": "/var/log/calico/felix.log",
          "ParsedDefaultJSON": "\"/var/log/calico/felix.log\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/felix.log",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The full path to the Felix log. Set to none to disable file logging.",
          "DescriptionHTML": "<p>The full path to the Felix log. Set to none to disable file logging.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogPrefix",
          "NameEnvVar": "FELIX_LogPrefix",
          "NameYAML": "logPrefix",
          "NameGoAPI": "LogPrefix",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "calico-packet",
          "ParsedDefault": "calico-packet",
          "ParsedDefaultJSON": "\"calico-packet\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "calico-packet",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log prefix that Felix uses when rendering LOG rules.",
          "DescriptionHTML": "<p>The log prefix that Felix uses when rendering LOG rules.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogSeverityFile",
          "NameEnvVar": "FELIX_LogSeverityFile",
          "NameYAML": "logSeverityFile",
          "NameGoAPI": "LogSeverityFile",
          "StringSchema": "One of: `DEBUG`, `ERROR`, `FATAL`, `INFO`, `WARNING` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DEBUG</code>, <code>ERROR</code>, <code>FATAL</code>, <code>INFO</code>, <code>WARNING</code> (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedDefaultJSON": "\"INFO\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Debug`, `Error`, `Fatal`, `Info`, `Warning`.",
          "YAMLEnumValues": ["Debug", "Error", "Fatal", "Info", "Warning"],
          "YAMLSchemaHTML": "One of: <code>Debug</code>, <code>Error</code>, <code>Fatal</code>, <code>Info</code>, <code>Warning</code>.",
          "YAMLDefault": "Info",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log severity above which logs are sent to the log file.",
          "DescriptionHTML": "<p>The log severity above which logs are sent to the log file.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogSeverityScreen",
          "NameEnvVar": "FELIX_LogSeverityScreen",
          "NameYAML": "logSeverityScreen",
          "NameGoAPI": "LogSeverityScreen",
          "StringSchema": "One of: `DEBUG`, `ERROR`, `FATAL`, `INFO`, `WARNING` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DEBUG</code>, <code>ERROR</code>, <code>FATAL</code>, <code>INFO</code>, <code>WARNING</code> (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedDefaultJSON": "\"INFO\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Debug`, `Error`, `Fatal`, `Info`, `Warning`.",
          "YAMLEnumValues": ["Debug", "Error", "Fatal", "Info", "Warning"],
          "YAMLSchemaHTML": "One of: <code>Debug</code>, <code>Error</code>, <code>Fatal</code>, <code>Info</code>, <code>Warning</code>.",
          "YAMLDefault": "Info",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log severity above which logs are sent to the stdout.",
          "DescriptionHTML": "<p>The log severity above which logs are sent to the stdout.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Logging",
          "GroupWithSortPrefix": "00 Process: Logging",
          "NameConfigFile": "LogSeveritySys",
          "NameEnvVar": "FELIX_LogSeveritySys",
          "NameYAML": "logSeveritySys",
          "NameGoAPI": "LogSeveritySys",
          "StringSchema": "One of: `DEBUG`, `ERROR`, `FATAL`, `INFO`, `WARNING` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DEBUG</code>, <code>ERROR</code>, <code>FATAL</code>, <code>INFO</code>, <code>WARNING</code> (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedDefaultJSON": "\"INFO\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Debug`, `Error`, `Fatal`, `Info`, `Warning`.",
          "YAMLEnumValues": ["Debug", "Error", "Fatal", "Info", "Warning"],
          "YAMLSchemaHTML": "One of: <code>Debug</code>, <code>Error</code>, <code>Fatal</code>, <code>Info</code>, <code>Warning</code>.",
          "YAMLDefault": "Info",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The log severity above which logs are sent to the syslog. Set to None for no logging to syslog.",
          "DescriptionHTML": "<p>The log severity above which logs are sent to the syslog. Set to None for no logging to syslog.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Process: Prometheus metrics",
      "Fields": [
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusGoMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusGoMetricsEnabled",
          "NameYAML": "prometheusGoMetricsEnabled",
          "NameGoAPI": "PrometheusGoMetricsEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.",
          "DescriptionHTML": "<p>Disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsCAFile",
          "NameEnvVar": "FELIX_PrometheusMetricsCAFile",
          "NameYAML": "prometheusMetricsCAFile",
          "NameGoAPI": "PrometheusMetricsCAFile",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the TLS CA file for the Prometheus metrics server.",
          "DescriptionHTML": "<p>The path to the TLS CA file for the Prometheus metrics server.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsCertFile",
          "NameEnvVar": "FELIX_PrometheusMetricsCertFile",
          "NameYAML": "prometheusMetricsCertFile",
          "NameGoAPI": "PrometheusMetricsCertFile",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the TLS certificate file for the Prometheus metrics server.",
          "DescriptionHTML": "<p>The path to the TLS certificate file for the Prometheus metrics server.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusMetricsEnabled",
          "NameYAML": "prometheusMetricsEnabled",
          "NameGoAPI": "PrometheusMetricsEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables the Prometheus metrics server in Felix if set to true.",
          "DescriptionHTML": "<p>Enables the Prometheus metrics server in Felix if set to true.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsHost",
          "NameEnvVar": "FELIX_PrometheusMetricsHost",
          "NameYAML": "prometheusMetricsHost",
          "NameGoAPI": "PrometheusMetricsHost",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,64}$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9:._+-]{1,64}$</code>",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The host that the Prometheus metrics server should bind to.",
          "DescriptionHTML": "<p>The host that the Prometheus metrics server should bind to.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsKeyFile",
          "NameEnvVar": "FELIX_PrometheusMetricsKeyFile",
          "NameYAML": "prometheusMetricsKeyFile",
          "NameGoAPI": "PrometheusMetricsKeyFile",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the TLS private key file for the Prometheus metrics server.",
          "DescriptionHTML": "<p>The path to the TLS private key file for the Prometheus metrics server.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusMetricsPort",
          "NameEnvVar": "FELIX_PrometheusMetricsPort",
          "NameYAML": "prometheusMetricsPort",
          "NameGoAPI": "PrometheusMetricsPort",
          "StringSchema": "Integer: [0,65535]",
          "StringSchemaHTML": "Integer: [0,65535]",
          "StringDefault": "9091",
          "ParsedDefault": "9091",
          "ParsedDefaultJSON": "9091",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [0,65535]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [0,65535]",
          "YAMLDefault": "9091",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The TCP port that the Prometheus metrics server should bind to.",
          "DescriptionHTML": "<p>The TCP port that the Prometheus metrics server should bind to.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusProcessMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusProcessMetricsEnabled",
          "NameYAML": "prometheusProcessMetricsEnabled",
          "NameGoAPI": "PrometheusProcessMetricsEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.",
          "DescriptionHTML": "<p>Disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Process: Prometheus metrics",
          "GroupWithSortPrefix": "00 Process: Prometheus metrics",
          "NameConfigFile": "PrometheusWireGuardMetricsEnabled",
          "NameEnvVar": "FELIX_PrometheusWireGuardMetricsEnabled",
          "NameYAML": "prometheusWireGuardMetricsEnabled",
          "NameGoAPI": "PrometheusWireGuardMetricsEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables wireguard metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.",
          "DescriptionHTML": "<p>Disables wireguard metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Dataplane: Common",
      "Fields": [
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "AllowIPIPPacketsFromWorkloads",
          "NameEnvVar": "FELIX_AllowIPIPPacketsFromWorkloads",
          "NameYAML": "allowIPIPPacketsFromWorkloads",
          "NameGoAPI": "AllowIPIPPacketsFromWorkloads",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads.",
          "DescriptionHTML": "<p>Controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "AllowVXLANPacketsFromWorkloads",
          "NameEnvVar": "FELIX_AllowVXLANPacketsFromWorkloads",
          "NameYAML": "allowVXLANPacketsFromWorkloads",
          "NameGoAPI": "AllowVXLANPacketsFromWorkloads",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads.",
          "DescriptionHTML": "<p>Controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "ChainInsertMode",
          "NameEnvVar": "FELIX_ChainInsertMode",
          "NameYAML": "chainInsertMode",
          "NameGoAPI": "ChainInsertMode",
          "StringSchema": "One of: `append`, `insert` (case insensitive)",
          "StringSchemaHTML": "One of: <code>append</code>, <code>insert</code> (case insensitive)",
          "StringDefault": "insert",
          "ParsedDefault": "insert",
          "ParsedDefaultJSON": "\"insert\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Append`, `Insert`.",
          "YAMLEnumValues": ["Append", "Insert"],
          "YAMLSchemaHTML": "One of: <code>Append</code>, <code>Insert</code>.",
          "YAMLDefault": "Insert",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed.",
          "DescriptionHTML": "<p>Controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DataplaneDriver",
          "NameEnvVar": "FELIX_DataplaneDriver",
          "NameYAML": "dataplaneDriver",
          "NameGoAPI": "DataplaneDriver",
          "StringSchema": "Path to executable, which must exist. If not an absolute path, the directory containing this binary and the system path will be searched.",
          "StringSchemaHTML": "Path to executable, which must exist. If not an absolute path, the directory containing this binary and the system path will be searched.",
          "StringDefault": "calico-iptables-plugin",
          "ParsedDefault": "calico-iptables-plugin",
          "ParsedDefaultJSON": "\"calico-iptables-plugin\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "calico-iptables-plugin",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Filename of the external dataplane driver to use. Only used if UseInternalDataplaneDriver is set to false.",
          "DescriptionHTML": "<p>Filename of the external dataplane driver to use. Only used if UseInternalDataplaneDriver is set to false.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DataplaneWatchdogTimeout",
          "NameEnvVar": "FELIX_DataplaneWatchdogTimeout",
          "NameYAML": "dataplaneWatchdogTimeout",
          "NameGoAPI": "DataplaneWatchdogTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedDefaultJSON": "90000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The readiness/liveness timeout used for Felix's (internal) dataplane driver. Deprecated: replaced by the generic HealthTimeoutOverrides.",
          "DescriptionHTML": "<p>The readiness/liveness timeout used for Felix's (internal) dataplane driver. Deprecated: replaced by the generic HealthTimeoutOverrides.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DefaultEndpointToHostAction",
          "NameEnvVar": "FELIX_DefaultEndpointToHostAction",
          "NameYAML": "defaultEndpointToHostAction",
          "NameGoAPI": "DefaultEndpointToHostAction",
          "StringSchema": "One of: `ACCEPT`, `DROP`, `RETURN` (case insensitive)",
          "StringSchemaHTML": "One of: <code>ACCEPT</code>, <code>DROP</code>, <code>RETURN</code> (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedDefaultJSON": "\"DROP\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Accept`, `Drop`, `Return`.",
          "YAMLEnumValues": ["Accept", "Drop", "Return"],
          "YAMLSchemaHTML": "One of: <code>Accept</code>, <code>Drop</code>, <code>Return</code>.",
          "YAMLDefault": "Drop",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that goes from a workload endpoint to the host itself (after the endpoint's egress policy is applied). By default, Calico blocks traffic from workload endpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables \"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy.",
          "DescriptionHTML": "<p>Controls what happens to traffic that goes from a workload endpoint to the host itself (after the endpoint's egress policy is applied). By default, Calico blocks traffic from workload endpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables \"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DeviceRouteProtocol",
          "NameEnvVar": "FELIX_DeviceRouteProtocol",
          "NameYAML": "deviceRouteProtocol",
          "NameGoAPI": "DeviceRouteProtocol",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "3",
          "ParsedDefault": "3",
          "ParsedDefaultJSON": "3",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "3",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the protocol to set on routes programmed by Felix. The protocol is an 8-bit label used to identify the owner of the route.",
          "DescriptionHTML": "<p>Controls the protocol to set on routes programmed by Felix. The protocol is an 8-bit label used to identify the owner of the route.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DeviceRouteSourceAddress",
          "NameEnvVar": "FELIX_DeviceRouteSourceAddress",
          "NameYAML": "deviceRouteSourceAddress",
          "NameGoAPI": "DeviceRouteSourceAddress",
          "StringSchema": "IPv4 address",
          "StringSchemaHTML": "IPv4 address",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "net.IP",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "IPv4 address to set as the source hint for routes programmed by Felix. When not set the source address for local traffic from host to workload will be determined by the kernel.",
          "DescriptionHTML": "<p>IPv4 address to set as the source hint for routes programmed by Felix. When not set the source address for local traffic from host to workload will be determined by the kernel.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DeviceRouteSourceAddressIPv6",
          "NameEnvVar": "FELIX_DeviceRouteSourceAddressIPv6",
          "NameYAML": "deviceRouteSourceAddressIPv6",
          "NameGoAPI": "DeviceRouteSourceAddressIPv6",
          "StringSchema": "IPv6 address",
          "StringSchemaHTML": "IPv6 address",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "net.IP",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "IPv6 address to set as the source hint for routes programmed by Felix. When not set the source address for local traffic from host to workload will be determined by the kernel.",
          "DescriptionHTML": "<p>IPv6 address to set as the source hint for routes programmed by Felix. When not set the source address for local traffic from host to workload will be determined by the kernel.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DisableConntrackInvalidCheck",
          "NameEnvVar": "FELIX_DisableConntrackInvalidCheck",
          "NameYAML": "disableConntrackInvalidCheck",
          "NameGoAPI": "DisableConntrackInvalidCheck",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables the check for invalid connections in conntrack. While the conntrack invalid check helps to detect malicious traffic, it can also cause issues with certain multi-NIC scenarios.",
          "DescriptionHTML": "<p>Disables the check for invalid connections in conntrack. While the conntrack invalid check helps to detect malicious traffic, it can also cause issues with certain multi-NIC scenarios.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "DropActionOverride",
          "NameEnvVar": "FELIX_DropActionOverride",
          "NameYAML": "dropActionOverride",
          "NameGoAPI": "DropActionOverride",
          "StringSchema": "One of: `ACCEPT`, `DROP`, `LOGandACCEPT`, `LOGandDROP` (case insensitive)",
          "StringSchemaHTML": "One of: <code>ACCEPT</code>, <code>DROP</code>, <code>LOGandACCEPT</code>, <code>LOGandDROP</code> (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedDefaultJSON": "\"DROP\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Accept`, `Drop`, `LogAndAccept`, `LogAndDrop`.",
          "YAMLEnumValues": ["Accept", "Drop", "LogAndAccept", "LogAndDrop"],
          "YAMLSchemaHTML": "One of: <code>Accept</code>, <code>Drop</code>, <code>LogAndAccept</code>, <code>LogAndDrop</code>.",
          "YAMLDefault": "Drop",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Overrides the Drop action in Felix, optionally changing the behavior to Accept, and optionally adding Log. Possible values are Drop, LogAndDrop, Accept, LogAndAccept.",
          "DescriptionHTML": "<p>Overrides the Drop action in Felix, optionally changing the behavior to Accept, and optionally adding Log. Possible values are Drop, LogAndDrop, Accept, LogAndAccept.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "EndpointStatusPathPrefix",
          "NameEnvVar": "FELIX_EndpointStatusPathPrefix",
          "NameYAML": "endpointStatusPathPrefix",
          "NameGoAPI": "EndpointStatusPathPrefix",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the directory where endpoint status will be written. Endpoint status file reporting is disabled if field is left empty.\n\nChosen directory should match the directory used by the CNI plugin for PodStartupDelay.",
          "DescriptionHTML": "<p>The path to the directory where endpoint status will be written. Endpoint status file reporting is disabled if field is left empty.</p>\n<p>Chosen directory should match the directory used by the CNI plugin for PodStartupDelay.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "ExternalNodesCIDRList",
          "NameEnvVar": "FELIX_ExternalNodesCIDRList",
          "NameYAML": "externalNodesList",
          "NameGoAPI": "ExternalNodesCIDRList",
          "StringSchema": "Comma-delimited list of CIDRs",
          "StringSchemaHTML": "Comma-delimited list of CIDRs",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of strings: `[\"<string>\", ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of strings: <code>[\"&lt;string&gt;\", ...]</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "A list of CIDR's of external, non-Calico nodes from which VXLAN/IPIP overlay traffic will be allowed. By default, external tunneled traffic is blocked to reduce attack surface.",
          "DescriptionHTML": "<p>A list of CIDR's of external, non-Calico nodes from which VXLAN/IPIP overlay traffic will be allowed. By default, external tunneled traffic is blocked to reduce attack surface.</p>",
          "UserEditable": true,
          "GoType": "*[]string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "FailsafeInboundHostPorts",
          "NameEnvVar": "FELIX_FailsafeInboundHostPorts",
          "NameYAML": "failsafeInboundHostPorts",
          "NameGoAPI": "FailsafeInboundHostPorts",
          "StringSchema": "Comma-delimited list of numeric ports with optional protocol and CIDR:`(tcp|udp):<cidr>:<port>`, `(tcp|udp):<port>` or `<port>`. IPv6 CIDRs must be enclosed in square brackets.",
          "StringSchemaHTML": "Comma-delimited list of numeric ports with optional protocol and CIDR:<code>(tcp|udp):&lt;cidr&gt;:&lt;port&gt;</code>, <code>(tcp|udp):&lt;port&gt;</code> or <code>&lt;port&gt;</code>. IPv6 CIDRs must be enclosed in square brackets.",
          "StringDefault": "tcp:22,udp:68,tcp:179,tcp:2379,tcp:2380,tcp:5473,tcp:6443,tcp:6666,tcp:6667",
          "ParsedDefault": "[{tcp 22 } {udp 68 } {tcp 179 } {tcp 2379 } {tcp 2380 } {tcp 5473 } {tcp 6443 } {tcp 6666 } {tcp 6667 }]",
          "ParsedDefaultJSON": "[{\"protocol\":\"tcp\",\"port\":22},{\"protocol\":\"udp\",\"port\":68},{\"protocol\":\"tcp\",\"port\":179},{\"protocol\":\"tcp\",\"port\":2379},{\"protocol\":\"tcp\",\"port\":2380},{\"protocol\":\"tcp\",\"port\":5473},{\"protocol\":\"tcp\",\"port\":6443},{\"protocol\":\"tcp\",\"port\":6666},{\"protocol\":\"tcp\",\"port\":6667}]",
          "ParsedType": "[]v3.ProtoPort",
          "YAMLType": "array",
          "YAMLSchema": "List of protocol/port objects with optional CIDR match: `[{protocol: \"TCP|UDP\", port: <port>, net: \"<cidr>\"}, ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of protocol/port objects with optional CIDR match: <code>[{protocol: \"TCP|UDP\", port: &lt;port&gt;, net: \"&lt;cidr&gt;\"}, ...]</code>.",
          "YAMLDefault": "[{\"protocol\":\"tcp\",\"port\":22},{\"protocol\":\"udp\",\"port\":68},{\"protocol\":\"tcp\",\"port\":179},{\"protocol\":\"tcp\",\"port\":2379},{\"protocol\":\"tcp\",\"port\":2380},{\"protocol\":\"tcp\",\"port\":5473},{\"protocol\":\"tcp\",\"port\":6443},{\"protocol\":\"tcp\",\"port\":6666},{\"protocol\":\"tcp\",\"port\":6667}]",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "A list of ProtoPort struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all inbound host ports, use the value \"[]\". The default value allows ssh access, DHCP, BGP, etcd and the Kubernetes API.",
          "DescriptionHTML": "<p>A list of ProtoPort struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all inbound host ports, use the value \"[]\". The default value allows ssh access, DHCP, BGP, etcd and the Kubernetes API.</p>",
          "UserEditable": true,
          "GoType": "*[]v3.ProtoPort",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "FailsafeOutboundHostPorts",
          "NameEnvVar": "FELIX_FailsafeOutboundHostPorts",
          "NameYAML": "failsafeOutboundHostPorts",
          "NameGoAPI": "FailsafeOutboundHostPorts",
          "StringSchema": "Comma-delimited list of numeric ports with optional protocol and CIDR:`(tcp|udp):<cidr>:<port>`, `(tcp|udp):<port>` or `<port>`. IPv6 CIDRs must be enclosed in square brackets.",
          "StringSchemaHTML": "Comma-delimited list of numeric ports with optional protocol and CIDR:<code>(tcp|udp):&lt;cidr&gt;:&lt;port&gt;</code>, <code>(tcp|udp):&lt;port&gt;</code> or <code>&lt;port&gt;</code>. IPv6 CIDRs must be enclosed in square brackets.",
          "StringDefault": "udp:53,udp:67,tcp:179,tcp:2379,tcp:2380,tcp:5473,tcp:6443,tcp:6666,tcp:6667",
          "ParsedDefault": "[{udp 53 } {udp 67 } {tcp 179 } {tcp 2379 } {tcp 2380 } {tcp 5473 } {tcp 6443 } {tcp 6666 } {tcp 6667 }]",
          "ParsedDefaultJSON": "[{\"protocol\":\"udp\",\"port\":53},{\"protocol\":\"udp\",\"port\":67},{\"protocol\":\"tcp\",\"port\":179},{\"protocol\":\"tcp\",\"port\":2379},{\"protocol\":\"tcp\",\"port\":2380},{\"protocol\":\"tcp\",\"port\":5473},{\"protocol\":\"tcp\",\"port\":6443},{\"protocol\":\"tcp\",\"port\":6666},{\"protocol\":\"tcp\",\"port\":6667}]",
          "ParsedType": "[]v3.ProtoPort",
          "YAMLType": "array",
          "YAMLSchema": "List of protocol/port objects with optional CIDR match: `[{protocol: \"TCP|UDP\", port: <port>, net: \"<cidr>\"}, ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of protocol/port objects with optional CIDR match: <code>[{protocol: \"TCP|UDP\", port: &lt;port&gt;, net: \"&lt;cidr&gt;\"}, ...]</code>.",
          "YAMLDefault": "[{\"protocol\":\"udp\",\"port\":53},{\"protocol\":\"udp\",\"port\":67},{\"protocol\":\"tcp\",\"port\":179},{\"protocol\":\"tcp\",\"port\":2379},{\"protocol\":\"tcp\",\"port\":2380},{\"protocol\":\"tcp\",\"port\":5473},{\"protocol\":\"tcp\",\"port\":6443},{\"protocol\":\"tcp\",\"port\":6666},{\"protocol\":\"tcp\",\"port\":6667}]",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "A list of PortProto struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all outbound host ports, use the value \"[]\". The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP, DNS, BGP and the Kubernetes API.",
          "DescriptionHTML": "<p>A list of PortProto struct objects including UDP/TCP/SCTP ports and CIDRs that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For backwards compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all outbound host ports, use the value \"[]\". The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP, DNS, BGP and the Kubernetes API.</p>",
          "UserEditable": true,
          "GoType": "*[]v3.ProtoPort",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "FloatingIPs",
          "NameEnvVar": "FELIX_FloatingIPs",
          "NameYAML": "floatingIPs",
          "NameGoAPI": "FloatingIPs",
          "StringSchema": "One of: `Disabled`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disabled\"`, `\"Enabled\"`.",
          "YAMLEnumValues": ["Disabled", "Enabled"],
          "YAMLSchemaHTML": "One of: <code>\"Disabled\"</code>, <code>\"Enabled\"</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures whether or not Felix will program non-OpenStack floating IP addresses. (OpenStack-derived floating IPs are always programmed, regardless of this setting.)",
          "DescriptionHTML": "<p>Configures whether or not Felix will program non-OpenStack floating IP addresses. (OpenStack-derived floating IPs are always programmed, regardless of this setting.)</p>",
          "UserEditable": true,
          "GoType": "*v3.FloatingIPType",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "IPForwarding",
          "NameEnvVar": "FELIX_IPForwarding",
          "NameYAML": "ipForwarding",
          "NameGoAPI": "IPForwarding",
          "StringSchema": "One of: `Disabled`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Enabled",
          "ParsedDefault": "Enabled",
          "ParsedDefaultJSON": "\"Enabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disabled\"`, `\"Enabled\"`.",
          "YAMLEnumValues": ["Disabled", "Enabled"],
          "YAMLSchemaHTML": "One of: <code>\"Disabled\"</code>, <code>\"Enabled\"</code>.",
          "YAMLDefault": "Enabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix sets the host sysctls to enable IP forwarding. IP forwarding is required when using Calico for workload networking. This should be disabled only on hosts where Calico is used solely for host protection. In BPF mode, due to a kernel interaction, either IPForwarding must be enabled or BPFEnforceRPF must be disabled.",
          "DescriptionHTML": "<p>Controls whether Felix sets the host sysctls to enable IP forwarding. IP forwarding is required when using Calico for workload networking. This should be disabled only on hosts where Calico is used solely for host protection. In BPF mode, due to a kernel interaction, either IPForwarding must be enabled or BPFEnforceRPF must be disabled.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "InterfaceExclude",
          "NameEnvVar": "FELIX_InterfaceExclude",
          "NameYAML": "interfaceExclude",
          "NameGoAPI": "InterfaceExclude",
          "StringSchema": "Comma-delimited list of Linux interface names/regex patterns. Regex patterns must start/end with `/`.",
          "StringSchemaHTML": "Comma-delimited list of Linux interface names/regex patterns. Regex patterns must start/end with <code>/</code>.",
          "StringDefault": "kube-ipvs0",
          "ParsedDefault": "[^kube-ipvs0$]",
          "ParsedDefaultJSON": "[\"^kube-ipvs0$\"]",
          "ParsedType": "[]*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "kube-ipvs0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A comma-separated list of interface names that should be excluded when Felix is resolving host endpoints. The default value ensures that Felix ignores Kubernetes' internal `kube-ipvs0` device. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with `/`. For example having values `/^kube/,veth1` will exclude all interfaces that begin with `kube` and also the interface `veth1`.",
          "DescriptionHTML": "<p>A comma-separated list of interface names that should be excluded when Felix is resolving host endpoints. The default value ensures that Felix ignores Kubernetes' internal <code>kube-ipvs0</code> device. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with <code>/</code>. For example having values <code>/^kube/,veth1</code> will exclude all interfaces that begin with <code>kube</code> and also the interface <code>veth1</code>.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "InterfacePrefix",
          "NameEnvVar": "FELIX_InterfacePrefix",
          "NameYAML": "interfacePrefix",
          "NameGoAPI": "InterfacePrefix",
          "StringSchema": "String matching regex `^[a-zA-Z0-9_-]{1,15}(,[a-zA-Z0-9_-]{1,15})*$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9_-]{1,15}(,[a-zA-Z0-9_-]{1,15})*$</code>",
          "StringDefault": "cali",
          "ParsedDefault": "cali",
          "ParsedDefaultJSON": "\"cali\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "cali",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value.",
          "DescriptionHTML": "<p>The interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "InterfaceRefreshInterval",
          "NameEnvVar": "FELIX_InterfaceRefreshInterval",
          "NameYAML": "interfaceRefreshInterval",
          "NameGoAPI": "InterfaceRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedDefaultJSON": "90000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.",
          "DescriptionHTML": "<p>The period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "Ipv6Support",
          "NameEnvVar": "FELIX_Ipv6Support",
          "NameYAML": "ipv6Support",
          "NameGoAPI": "IPv6Support",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix enables support for IPv6 (if supported by the in-use dataplane).",
          "DescriptionHTML": "<p>Controls whether Felix enables support for IPv6 (if supported by the in-use dataplane).</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "KubeMasqueradeBit",
          "NameEnvVar": "FELIX_KubeMasqueradeBit",
          "NameYAML": "kubeMasqueradeBit",
          "NameGoAPI": "KubeMasqueradeBit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "14",
          "ParsedDefault": "14",
          "ParsedDefaultJSON": "14",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "14",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Should be set to the same value as --iptables-masquerade-bit of kube-proxy when TPROXY is used. The default is the same as kube-proxy default thus only needs a change if kube-proxy is using a non-standard setting. Must be within the range of 0-31.",
          "DescriptionHTML": "<p>Should be set to the same value as --iptables-masquerade-bit of kube-proxy when TPROXY is used. The default is the same as kube-proxy default thus only needs a change if kube-proxy is using a non-standard setting. Must be within the range of 0-31.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "MTUIfacePattern",
          "NameEnvVar": "FELIX_MTUIfacePattern",
          "NameYAML": "mtuIfacePattern",
          "NameGoAPI": "MTUIfacePattern",
          "StringSchema": "Regular expression",
          "StringSchemaHTML": "Regular expression",
          "StringDefault": "^((en|wl|ww|sl|ib)[Pcopsvx].*|(eth|wlan|wwan).*)",
          "ParsedDefault": "^((en|wl|ww|sl|ib)[Pcopsvx].*|(eth|wlan|wwan).*)",
          "ParsedDefaultJSON": "\"^((en|wl|ww|sl|ib)[Pcopsvx].*|(eth|wlan|wwan).*)\"",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "^((en|wl|ww|sl|ib)[Pcopsvx].*|(eth|wlan|wwan).*)",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).",
          "DescriptionHTML": "<p>A regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NATOutgoingAddress",
          "NameEnvVar": "FELIX_NATOutgoingAddress",
          "NameYAML": "natOutgoingAddress",
          "NameGoAPI": "NATOutgoingAddress",
          "StringSchema": "IPv4 address",
          "StringSchemaHTML": "IPv4 address",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "net.IP",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (i.e. it uses the iptables MASQUERADE target).",
          "DescriptionHTML": "<p>Specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (i.e. it uses the iptables MASQUERADE target).</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NATPortRange",
          "NameEnvVar": "FELIX_NATPortRange",
          "NameYAML": "natPortRange",
          "NameGoAPI": "NATPortRange",
          "StringSchema": "Port range: either a single number in [0,65535] or a range of numbers `n:m`",
          "StringSchemaHTML": "Port range: either a single number in [0,65535] or a range of numbers <code>n:m</code>",
          "StringDefault": "",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "numorstring.Port",
          "YAMLType": "integer or string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.",
          "DescriptionHTML": "<p>Specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.</p>",
          "UserEditable": true,
          "GoType": "*numorstring.Port",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NFTablesMode",
          "NameEnvVar": "FELIX_NFTablesMode",
          "NameYAML": "nftablesMode",
          "NameGoAPI": "NFTablesMode",
          "StringSchema": "One of: `Disabled`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Auto\"`, `\"Disabled\"`, `\"Enabled\"`.",
          "YAMLEnumValues": ["Auto", "Disabled", "Enabled"],
          "YAMLSchemaHTML": "One of: <code>\"Auto\"</code>, <code>\"Disabled\"</code>, <code>\"Enabled\"</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures nftables support in Felix.",
          "DescriptionHTML": "<p>Configures nftables support in Felix.</p>",
          "UserEditable": true,
          "GoType": "*v3.NFTablesMode",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NetlinkTimeoutSecs",
          "NameEnvVar": "FELIX_NetlinkTimeoutSecs",
          "NameYAML": "netlinkTimeout",
          "NameGoAPI": "NetlinkTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "10",
          "ParsedDefault": "10s",
          "ParsedDefaultJSON": "10000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "10s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The timeout when talking to the kernel over the netlink protocol, used for programming routes, rules, and other kernel objects.",
          "DescriptionHTML": "<p>The timeout when talking to the kernel over the netlink protocol, used for programming routes, rules, and other kernel objects.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "NfNetlinkBufSize",
          "NameEnvVar": "FELIX_NfNetlinkBufSize",
          "NameYAML": "nfNetlinkBufSize",
          "NameGoAPI": "NfNetlinkBufSize",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "65536",
          "ParsedDefault": "65536",
          "ParsedDefaultJSON": "65536",
          "ParsedType": "int",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "65536",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the size of NFLOG messages that the kernel will try to send to Felix. NFLOG messages are used to report flow verdicts from the kernel. Warning: currently increasing the value may cause errors due to a bug in the netlink library.",
          "DescriptionHTML": "<p>Controls the size of NFLOG messages that the kernel will try to send to Felix. NFLOG messages are used to report flow verdicts from the kernel. Warning: currently increasing the value may cause errors due to a bug in the netlink library.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "PolicySyncPathPrefix",
          "NameEnvVar": "FELIX_PolicySyncPathPrefix",
          "NameYAML": "policySyncPathPrefix",
          "NameGoAPI": "PolicySyncPathPrefix",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to by Felix to communicate policy changes to external services, like Application layer policy.",
          "DescriptionHTML": "<p>Used to by Felix to communicate policy changes to external services, like Application layer policy.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RemoveExternalRoutes",
          "NameEnvVar": "FELIX_RemoveExternalRoutes",
          "NameYAML": "removeExternalRoutes",
          "NameGoAPI": "RemoveExternalRoutes",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will remove unexpected routes to workload interfaces. Felix will always clean up expected routes that use the configured DeviceRouteProtocol. To add your own routes, you must use a distinct protocol (in addition to setting this field to false).",
          "DescriptionHTML": "<p>Controls whether Felix will remove unexpected routes to workload interfaces. Felix will always clean up expected routes that use the configured DeviceRouteProtocol. To add your own routes, you must use a distinct protocol (in addition to setting this field to false).</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteRefreshInterval",
          "NameEnvVar": "FELIX_RouteRefreshInterval",
          "NameYAML": "routeRefreshInterval",
          "NameGoAPI": "RouteRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedDefaultJSON": "90000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh.",
          "DescriptionHTML": "<p>The period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteSource",
          "NameEnvVar": "FELIX_RouteSource",
          "NameYAML": "routeSource",
          "NameGoAPI": "RouteSource",
          "StringSchema": "One of: `CalicoIPAM`, `WorkloadIPs` (case insensitive)",
          "StringSchemaHTML": "One of: <code>CalicoIPAM</code>, <code>WorkloadIPs</code> (case insensitive)",
          "StringDefault": "CalicoIPAM",
          "ParsedDefault": "CalicoIPAM",
          "ParsedDefaultJSON": "\"CalicoIPAM\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `CalicoIPAM`, `WorkloadIPs`.",
          "YAMLEnumValues": ["CalicoIPAM", "WorkloadIPs"],
          "YAMLSchemaHTML": "One of: <code>CalicoIPAM</code>, <code>WorkloadIPs</code>.",
          "YAMLDefault": "CalicoIPAM",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.",
          "DescriptionHTML": "<p>Configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteSyncDisabled",
          "NameEnvVar": "FELIX_RouteSyncDisabled",
          "NameYAML": "routeSyncDisabled",
          "NameGoAPI": "RouteSyncDisabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Will disable all operations performed on the route table. Set to true to run in network-policy mode only.",
          "DescriptionHTML": "<p>Will disable all operations performed on the route table. Set to true to run in network-policy mode only.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteTableRange",
          "NameEnvVar": "FELIX_RouteTableRange",
          "NameYAML": "routeTableRange",
          "NameGoAPI": "RouteTableRange",
          "StringSchema": "Range of route table indices `n-m`, where `n` and `m` are integers in [0,250].",
          "StringSchemaHTML": "Range of route table indices <code>n-m</code>, where <code>n</code> and <code>m</code> are integers in [0,250].",
          "StringDefault": "",
          "ParsedDefault": "{0 0}",
          "ParsedDefaultJSON": "{\"Min\":0,\"Max\":0}",
          "ParsedType": "idalloc.IndexRange",
          "YAMLType": "object",
          "YAMLSchema": "Route table range: `{min:<n>, max<m>}`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Route table range: <code>{min:&lt;n&gt;, max&lt;m&gt;}</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Deprecated in favor of RouteTableRanges. Calico programs additional Linux route tables for various purposes. RouteTableRange specifies the indices of the route tables that Calico should use.",
          "DescriptionHTML": "<p>Deprecated in favor of RouteTableRanges. Calico programs additional Linux route tables for various purposes. RouteTableRange specifies the indices of the route tables that Calico should use.</p>",
          "UserEditable": true,
          "GoType": "*v3.RouteTableRange",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "RouteTableRanges",
          "NameEnvVar": "FELIX_RouteTableRanges",
          "NameYAML": "routeTableRanges",
          "NameGoAPI": "RouteTableRanges",
          "StringSchema": "Comma or space-delimited list of route table ranges of the form `n-m` where `n` and `m` are integers in [0,4294967295]. The sum of the sizes of all ranges may not exceed 65535.",
          "StringSchemaHTML": "Comma or space-delimited list of route table ranges of the form <code>n-m</code> where <code>n</code> and <code>m</code> are integers in [0,4294967295]. The sum of the sizes of all ranges may not exceed 65535.",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "[]idalloc.IndexRange",
          "YAMLType": "array",
          "YAMLSchema": "List of route table ranges: `[{min:<n>, max<m>}, ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of route table ranges: <code>[{min:&lt;n&gt;, max&lt;m&gt;}, ...]</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Calico programs additional Linux route tables for various purposes. RouteTableRanges specifies a set of table index ranges that Calico should use. Deprecates`RouteTableRange`, overrides `RouteTableRange`.",
          "DescriptionHTML": "<p>Calico programs additional Linux route tables for various purposes. RouteTableRanges specifies a set of table index ranges that Calico should use. Deprecates<code>RouteTableRange</code>, overrides <code>RouteTableRange</code>.</p>",
          "UserEditable": true,
          "GoType": "*v3.RouteTableRanges",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "ServiceLoopPrevention",
          "NameEnvVar": "FELIX_ServiceLoopPrevention",
          "NameYAML": "serviceLoopPrevention",
          "NameGoAPI": "ServiceLoopPrevention",
          "StringSchema": "One of: `Disabled`, `Drop`, `Reject` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Drop</code>, <code>Reject</code> (case insensitive)",
          "StringDefault": "Drop",
          "ParsedDefault": "Drop",
          "ParsedDefaultJSON": "\"Drop\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Disabled`, `Drop`, `Reject`.",
          "YAMLEnumValues": ["Disabled", "Drop", "Reject"],
          "YAMLSchemaHTML": "One of: <code>Disabled</code>, <code>Drop</code>, <code>Reject</code>.",
          "YAMLDefault": "Drop",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed.",
          "DescriptionHTML": "<p>When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "SidecarAccelerationEnabled",
          "NameEnvVar": "FELIX_SidecarAccelerationEnabled",
          "NameYAML": "sidecarAccelerationEnabled",
          "NameGoAPI": "SidecarAccelerationEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables experimental sidecar acceleration.",
          "DescriptionHTML": "<p>Enables experimental sidecar acceleration.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "UseInternalDataplaneDriver",
          "NameEnvVar": "FELIX_UseInternalDataplaneDriver",
          "NameYAML": "useInternalDataplaneDriver",
          "NameGoAPI": "UseInternalDataplaneDriver",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If true, Felix will use its internal dataplane programming logic. If false, it will launch an external dataplane driver and communicate with it over protobuf.",
          "DescriptionHTML": "<p>If true, Felix will use its internal dataplane programming logic. If false, it will launch an external dataplane driver and communicate with it over protobuf.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Common",
          "GroupWithSortPrefix": "10 Dataplane: Common",
          "NameConfigFile": "WorkloadSourceSpoofing",
          "NameEnvVar": "FELIX_WorkloadSourceSpoofing",
          "NameYAML": "workloadSourceSpoofing",
          "NameGoAPI": "WorkloadSourceSpoofing",
          "StringSchema": "One of: `Any`, `Disabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Any</code>, <code>Disabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Any`, `Disabled`.",
          "YAMLEnumValues": ["Any", "Disabled"],
          "YAMLSchemaHTML": "One of: <code>Any</code>, <code>Disabled</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether pods can use the allowedSourcePrefixes annotation to send traffic with a source IP address that is not theirs. This is disabled by default. When set to \"Any\", pods can request any prefix.",
          "DescriptionHTML": "<p>Controls whether pods can use the allowedSourcePrefixes annotation to send traffic with a source IP address that is not theirs. This is disabled by default. When set to \"Any\", pods can request any prefix.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Dataplane: iptables",
      "Fields": [
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IpsetsRefreshInterval",
          "NameEnvVar": "FELIX_IpsetsRefreshInterval",
          "NameYAML": "ipsetsRefreshInterval",
          "NameGoAPI": "IpsetsRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedDefaultJSON": "90000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the period at which Felix re-checks all IP sets to look for discrepancies. Set to 0 to disable the periodic refresh.",
          "DescriptionHTML": "<p>Controls the period at which Felix re-checks all IP sets to look for discrepancies. Set to 0 to disable the periodic refresh.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesBackend",
          "NameEnvVar": "FELIX_IptablesBackend",
          "NameYAML": "iptablesBackend",
          "NameGoAPI": "IptablesBackend",
          "StringSchema": "One of: `auto`, `legacy`, `nft` (case insensitive)",
          "StringSchemaHTML": "One of: <code>auto</code>, <code>legacy</code>, <code>nft</code> (case insensitive)",
          "StringDefault": "auto",
          "ParsedDefault": "auto",
          "ParsedDefaultJSON": "\"auto\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Auto`, `Legacy`, `NFT`.",
          "YAMLEnumValues": ["Auto", "Legacy", "NFT"],
          "YAMLSchemaHTML": "One of: <code>Auto</code>, <code>Legacy</code>, <code>NFT</code>.",
          "YAMLDefault": "Auto",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which backend of iptables will be used. The default is `Auto`.\n\nWarning: changing this on a running system can leave \"orphaned\" rules in the \"other\" backend. These should be cleaned up to avoid confusing interactions.",
          "DescriptionHTML": "<p>Controls which backend of iptables will be used. The default is <code>Auto</code>.</p>\n<p>Warning: changing this on a running system can leave \"orphaned\" rules in the \"other\" backend. These should be cleaned up to avoid confusing interactions.</p>",
          "UserEditable": true,
          "GoType": "*v3.IptablesBackend",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesFilterAllowAction",
          "NameEnvVar": "FELIX_IptablesFilterAllowAction",
          "NameYAML": "iptablesFilterAllowAction",
          "NameGoAPI": "IptablesFilterAllowAction",
          "StringSchema": "One of: `ACCEPT`, `RETURN` (case insensitive)",
          "StringSchemaHTML": "One of: <code>ACCEPT</code>, <code>RETURN</code> (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedDefaultJSON": "\"ACCEPT\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Accept`, `Return`.",
          "YAMLEnumValues": ["Accept", "Return"],
          "YAMLSchemaHTML": "One of: <code>Accept</code>, <code>Return</code>.",
          "YAMLDefault": "Accept",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is accepted by a Felix policy chain in the iptables filter table (which is used for \"normal\" policy). The default will immediately `Accept` the traffic. Use `Return` to send the traffic back up to the system chains for further processing.",
          "DescriptionHTML": "<p>Controls what happens to traffic that is accepted by a Felix policy chain in the iptables filter table (which is used for \"normal\" policy). The default will immediately <code>Accept</code> the traffic. Use <code>Return</code> to send the traffic back up to the system chains for further processing.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesFilterDenyAction",
          "NameEnvVar": "FELIX_IptablesFilterDenyAction",
          "NameYAML": "iptablesFilterDenyAction",
          "NameGoAPI": "IptablesFilterDenyAction",
          "StringSchema": "One of: `DROP`, `REJECT` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DROP</code>, <code>REJECT</code> (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedDefaultJSON": "\"DROP\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Drop`, `Reject`.",
          "YAMLEnumValues": ["Drop", "Reject"],
          "YAMLSchemaHTML": "One of: <code>Drop</code>, <code>Reject</code>.",
          "YAMLDefault": "Drop",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is denied by network policy. By default Calico blocks traffic with an iptables \"DROP\" action. If you want to use \"REJECT\" action instead you can configure it in here.",
          "DescriptionHTML": "<p>Controls what happens to traffic that is denied by network policy. By default Calico blocks traffic with an iptables \"DROP\" action. If you want to use \"REJECT\" action instead you can configure it in here.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesLockFilePath",
          "NameEnvVar": "FELIX_IptablesLockFilePath",
          "NameYAML": "iptablesLockFilePath",
          "NameGoAPI": "IptablesLockFilePath",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "/run/xtables.lock",
          "ParsedDefault": "/run/xtables.lock",
          "ParsedDefaultJSON": "\"/run/xtables.lock\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/run/xtables.lock",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path).",
          "DescriptionHTML": "<p>The location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path).</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesLockProbeIntervalMillis",
          "NameEnvVar": "FELIX_IptablesLockProbeIntervalMillis",
          "NameYAML": "iptablesLockProbeInterval",
          "NameGoAPI": "IptablesLockProbeInterval",
          "StringSchema": "Milliseconds (floating point)",
          "StringSchemaHTML": "Milliseconds (floating point)",
          "StringDefault": "50",
          "ParsedDefault": "50ms",
          "ParsedDefaultJSON": "50000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "50ms",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When IptablesLockTimeout is enabled: the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU.",
          "DescriptionHTML": "<p>When IptablesLockTimeout is enabled: the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesLockTimeoutSecs",
          "NameEnvVar": "FELIX_IptablesLockTimeoutSecs",
          "NameYAML": "iptablesLockTimeout",
          "NameGoAPI": "IptablesLockTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The time that Felix itself will wait for the iptables lock (rather than delegating the lock handling to the `iptables` command).\n\nDeprecated: `iptables-restore` v1.8+ always takes the lock, so enabling this feature results in deadlock.",
          "DescriptionHTML": "<p>The time that Felix itself will wait for the iptables lock (rather than delegating the lock handling to the <code>iptables</code> command).</p>\n<p>Deprecated: <code>iptables-restore</code> v1.8+ always takes the lock, so enabling this feature results in deadlock.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesMangleAllowAction",
          "NameEnvVar": "FELIX_IptablesMangleAllowAction",
          "NameYAML": "iptablesMangleAllowAction",
          "NameGoAPI": "IptablesMangleAllowAction",
          "StringSchema": "One of: `ACCEPT`, `RETURN` (case insensitive)",
          "StringSchemaHTML": "One of: <code>ACCEPT</code>, <code>RETURN</code> (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedDefaultJSON": "\"ACCEPT\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Accept`, `Return`.",
          "YAMLEnumValues": ["Accept", "Return"],
          "YAMLSchemaHTML": "One of: <code>Accept</code>, <code>Return</code>.",
          "YAMLDefault": "Accept",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is accepted by a Felix policy chain in the iptables mangle table (which is used for \"pre-DNAT\" policy). The default will immediately `Accept` the traffic. Use `Return` to send the traffic back up to the system chains for further processing.",
          "DescriptionHTML": "<p>Controls what happens to traffic that is accepted by a Felix policy chain in the iptables mangle table (which is used for \"pre-DNAT\" policy). The default will immediately <code>Accept</code> the traffic. Use <code>Return</code> to send the traffic back up to the system chains for further processing.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesMarkMask",
          "NameEnvVar": "FELIX_IptablesMarkMask",
          "NameYAML": "iptablesMarkMask",
          "NameGoAPI": "IptablesMarkMask",
          "StringSchema": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: `0xffff0000`",
          "StringSchemaHTML": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: <code>0xffff0000</code>",
          "StringDefault": "0xffff0000",
          "ParsedDefault": "4294901760",
          "ParsedDefaultJSON": "4294901760",
          "ParsedType": "uint32",
          "YAMLType": "integer",
          "YAMLSchema": "Unsigned 32-bit integer.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Unsigned 32-bit integer.",
          "YAMLDefault": "0xffff0000",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system.",
          "DescriptionHTML": "<p>The mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system.</p>",
          "UserEditable": true,
          "GoType": "*uint32",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesNATOutgoingInterfaceFilter",
          "NameEnvVar": "FELIX_IptablesNATOutgoingInterfaceFilter",
          "NameYAML": "iptablesNATOutgoingInterfaceFilter",
          "NameGoAPI": "IptablesNATOutgoingInterfaceFilter",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9:._+-]{1,15}$</code>",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "This parameter can be used to limit the host interfaces on which Calico will apply SNAT to traffic leaving a Calico IPAM pool with \"NAT outgoing\" enabled. This can be useful if you have a main data interface, where traffic should be SNATted and a secondary device (such as the docker bridge) which is local to the host and doesn't require SNAT. This parameter uses the iptables interface matching syntax, which allows + as a wildcard. Most users will not need to set this. Example: if your data interfaces are eth0 and eth1 and you want to exclude the docker bridge, you could set this to eth+.",
          "DescriptionHTML": "<p>This parameter can be used to limit the host interfaces on which Calico will apply SNAT to traffic leaving a Calico IPAM pool with \"NAT outgoing\" enabled. This can be useful if you have a main data interface, where traffic should be SNATted and a secondary device (such as the docker bridge) which is local to the host and doesn't require SNAT. This parameter uses the iptables interface matching syntax, which allows + as a wildcard. Most users will not need to set this. Example: if your data interfaces are eth0 and eth1 and you want to exclude the docker bridge, you could set this to eth+.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesPostWriteCheckIntervalSecs",
          "NameEnvVar": "FELIX_IptablesPostWriteCheckIntervalSecs",
          "NameYAML": "iptablesPostWriteCheckInterval",
          "NameGoAPI": "IptablesPostWriteCheckInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "5",
          "ParsedDefault": "5s",
          "ParsedDefaultJSON": "5000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "5s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock.",
          "DescriptionHTML": "<p>The period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "IptablesRefreshInterval",
          "NameEnvVar": "FELIX_IptablesRefreshInterval",
          "NameYAML": "iptablesRefreshInterval",
          "NameGoAPI": "IptablesRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "180",
          "ParsedDefault": "3m0s",
          "ParsedDefaultJSON": "180000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "3m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage.",
          "DescriptionHTML": "<p>The period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "KubeNodePortRanges",
          "NameEnvVar": "FELIX_KubeNodePortRanges",
          "NameYAML": "kubeNodePortRanges",
          "NameGoAPI": "KubeNodePortRanges",
          "StringSchema": "List of port ranges: comma-delimited list of either single numbers in range [0,65535] or a ranges of numbers `n:m`",
          "StringSchemaHTML": "List of port ranges: comma-delimited list of either single numbers in range [0,65535] or a ranges of numbers <code>n:m</code>",
          "StringDefault": "30000:32767",
          "ParsedDefault": "[30000:32767]",
          "ParsedDefaultJSON": "[\"30000:32767\"]",
          "ParsedType": "[]numorstring.Port",
          "YAMLType": "array",
          "YAMLSchema": "List of ports: `[<port>, ...]` where `<port>` is a port number (integer) or range (string), for example `80`, `8080:8089`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of ports: <code>[&lt;port&gt;, ...]</code> where <code>&lt;port&gt;</code> is a port number (integer) or range (string), for example <code>80</code>, <code>8080:8089</code>.",
          "YAMLDefault": "[\"30000:32767\"]",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. .",
          "DescriptionHTML": "<p>Holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. .</p>",
          "UserEditable": true,
          "GoType": "*[]numorstring.Port",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: iptables",
          "GroupWithSortPrefix": "20 Dataplane: iptables",
          "NameConfigFile": "MaxIpsetSize",
          "NameEnvVar": "FELIX_MaxIpsetSize",
          "NameYAML": "maxIpsetSize",
          "NameGoAPI": "MaxIpsetSize",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "1048576",
          "ParsedDefault": "1048576",
          "ParsedDefaultJSON": "1048576",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "1048576",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The maximum number of IP addresses that can be stored in an IP set. Not applicable if using the nftables backend.",
          "DescriptionHTML": "<p>The maximum number of IP addresses that can be stored in an IP set. Not applicable if using the nftables backend.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Dataplane: nftables",
      "Fields": [
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesFilterAllowAction",
          "NameEnvVar": "FELIX_NftablesFilterAllowAction",
          "NameYAML": "nftablesFilterAllowAction",
          "NameGoAPI": "NftablesFilterAllowAction",
          "StringSchema": "One of: `ACCEPT`, `RETURN` (case insensitive)",
          "StringSchemaHTML": "One of: <code>ACCEPT</code>, <code>RETURN</code> (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedDefaultJSON": "\"ACCEPT\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Accept`, `Return`.",
          "YAMLEnumValues": ["Accept", "Return"],
          "YAMLSchemaHTML": "One of: <code>Accept</code>, <code>Return</code>.",
          "YAMLDefault": "Accept",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls the nftables action that Felix uses to represent the \"allow\" policy verdict in the filter table. The default is to `ACCEPT` the traffic, which is a terminal action. Alternatively, `RETURN` can be used to return the traffic back to the top-level chain for further processing by your rules.",
          "DescriptionHTML": "<p>Controls the nftables action that Felix uses to represent the \"allow\" policy verdict in the filter table. The default is to <code>ACCEPT</code> the traffic, which is a terminal action. Alternatively, <code>RETURN</code> can be used to return the traffic back to the top-level chain for further processing by your rules.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesFilterDenyAction",
          "NameEnvVar": "FELIX_NftablesFilterDenyAction",
          "NameYAML": "nftablesFilterDenyAction",
          "NameGoAPI": "NftablesFilterDenyAction",
          "StringSchema": "One of: `DROP`, `REJECT` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DROP</code>, <code>REJECT</code> (case insensitive)",
          "StringDefault": "DROP",
          "ParsedDefault": "DROP",
          "ParsedDefaultJSON": "\"DROP\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Drop`, `Reject`.",
          "YAMLEnumValues": ["Drop", "Reject"],
          "YAMLSchemaHTML": "One of: <code>Drop</code>, <code>Reject</code>.",
          "YAMLDefault": "Drop",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls what happens to traffic that is denied by network policy. By default, Calico blocks traffic with a \"drop\" action. If you want to use a \"reject\" action instead you can configure it here.",
          "DescriptionHTML": "<p>Controls what happens to traffic that is denied by network policy. By default, Calico blocks traffic with a \"drop\" action. If you want to use a \"reject\" action instead you can configure it here.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesMangleAllowAction",
          "NameEnvVar": "FELIX_NftablesMangleAllowAction",
          "NameYAML": "nftablesMangleAllowAction",
          "NameGoAPI": "NftablesMangleAllowAction",
          "StringSchema": "One of: `ACCEPT`, `RETURN` (case insensitive)",
          "StringSchemaHTML": "One of: <code>ACCEPT</code>, <code>RETURN</code> (case insensitive)",
          "StringDefault": "ACCEPT",
          "ParsedDefault": "ACCEPT",
          "ParsedDefaultJSON": "\"ACCEPT\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Accept`, `Return`.",
          "YAMLEnumValues": ["Accept", "Return"],
          "YAMLSchemaHTML": "One of: <code>Accept</code>, <code>Return</code>.",
          "YAMLDefault": "Accept",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Controls the nftables action that Felix uses to represent the \"allow\" policy verdict in the mangle table. The default is to `ACCEPT` the traffic, which is a terminal action. Alternatively, `RETURN` can be used to return the traffic back to the top-level chain for further processing by your rules.",
          "DescriptionHTML": "<p>Controls the nftables action that Felix uses to represent the \"allow\" policy verdict in the mangle table. The default is to <code>ACCEPT</code> the traffic, which is a terminal action. Alternatively, <code>RETURN</code> can be used to return the traffic back to the top-level chain for further processing by your rules.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesMarkMask",
          "NameEnvVar": "FELIX_NftablesMarkMask",
          "NameYAML": "nftablesMarkMask",
          "NameGoAPI": "NftablesMarkMask",
          "StringSchema": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: `0xffff0000`",
          "StringSchemaHTML": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: <code>0xffff0000</code>",
          "StringDefault": "0xffff0000",
          "ParsedDefault": "4294901760",
          "ParsedDefaultJSON": "4294901760",
          "ParsedType": "uint32",
          "YAMLType": "integer",
          "YAMLSchema": "Unsigned 32-bit integer.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Unsigned 32-bit integer.",
          "YAMLDefault": "0xffff0000",
          "Required": true,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The mask that Felix selects its nftables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system.",
          "DescriptionHTML": "<p>The mask that Felix selects its nftables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system.</p>",
          "UserEditable": true,
          "GoType": "*uint32",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: nftables",
          "GroupWithSortPrefix": "21 Dataplane: nftables",
          "NameConfigFile": "NftablesRefreshInterval",
          "NameEnvVar": "FELIX_NftablesRefreshInterval",
          "NameYAML": "nftablesRefreshInterval",
          "NameGoAPI": "NftablesRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "180",
          "ParsedDefault": "3m0s",
          "ParsedDefaultJSON": "180000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "3m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the interval at which Felix periodically refreshes the nftables rules.",
          "DescriptionHTML": "<p>Controls the interval at which Felix periodically refreshes the nftables rules.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Dataplane: eBPF",
      "Fields": [
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFCTLBLogFilter",
          "NameEnvVar": "FELIX_BPFCTLBLogFilter",
          "NameYAML": "bpfCTLBLogFilter",
          "NameGoAPI": "BPFCTLBLogFilter",
          "StringSchema": "One of: `all` (case insensitive)",
          "StringSchemaHTML": "One of: <code>all</code> (case insensitive)",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies, what is logged by connect time load balancer when BPFLogLevel is debug. Currently has to be specified as 'all' when BPFLogFilters is set to see CTLB logs.",
          "DescriptionHTML": "<p>Specifies, what is logged by connect time load balancer when BPFLogLevel is debug. Currently has to be specified as 'all' when BPFLogFilters is set to see CTLB logs.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFConnectTimeLoadBalancing",
          "NameEnvVar": "FELIX_BPFConnectTimeLoadBalancing",
          "NameYAML": "bpfConnectTimeLoadBalancing",
          "NameGoAPI": "BPFConnectTimeLoadBalancing",
          "StringSchema": "One of: `Disabled`, `Enabled`, `TCP` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code>, <code>TCP</code> (case insensitive)",
          "StringDefault": "TCP",
          "ParsedDefault": "TCP",
          "ParsedDefaultJSON": "\"TCP\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disabled\"`, `\"Enabled\"`, `\"TCP\"`.",
          "YAMLEnumValues": ["Disabled", "Enabled", "TCP"],
          "YAMLSchemaHTML": "One of: <code>\"Disabled\"</code>, <code>\"Enabled\"</code>, <code>\"TCP\"</code>.",
          "YAMLDefault": "TCP",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When in BPF mode, controls whether Felix installs the connect-time load balancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.When set to TCP, connect time load balancing is available only for services with TCP ports.",
          "DescriptionHTML": "<p>When in BPF mode, controls whether Felix installs the connect-time load balancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.When set to TCP, connect time load balancing is available only for services with TCP ports.</p>",
          "UserEditable": true,
          "GoType": "*v3.BPFConnectTimeLBType",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFConnectTimeLoadBalancingEnabled",
          "NameEnvVar": "FELIX_BPFConnectTimeLoadBalancingEnabled",
          "NameYAML": "bpfConnectTimeLoadBalancingEnabled",
          "NameGoAPI": "BPFConnectTimeLoadBalancingEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When in BPF mode, controls whether Felix installs the connection-time load balancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections. The only reason to disable it is for debugging purposes.\n\nDeprecated: Use BPFConnectTimeLoadBalancing.",
          "DescriptionHTML": "<p>When in BPF mode, controls whether Felix installs the connection-time load balancer. The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections. The only reason to disable it is for debugging purposes.</p>\n<p>Deprecated: Use BPFConnectTimeLoadBalancing.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDNSPolicyMode",
          "NameEnvVar": "FELIX_BPFDNSPolicyMode",
          "NameYAML": "bpfDNSPolicyMode",
          "NameGoAPI": "BPFDNSPolicyMode",
          "StringSchema": "One of: `Inline`, `NoDelay` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Inline</code>, <code>NoDelay</code> (case insensitive)",
          "StringDefault": "Inline",
          "ParsedDefault": "Inline",
          "ParsedDefaultJSON": "\"Inline\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "Inline",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies how DNS policy programming will be handled. Inline - BPF parses DNS response inline with DNS response packet processing. This guarantees the DNS rules reflect any change immediately. NoDelay - Felix does not introduce any delay to the packets. DNS rules may not have been programmed by the time the first packet traverses the policy rules. Client applications need to handle reconnection attempts if initial connection attempts fail. This may be problematic for some applications or for very low DNS TTLs.",
          "DescriptionHTML": "<p>Specifies how DNS policy programming will be handled. Inline - BPF parses DNS response inline with DNS response packet processing. This guarantees the DNS rules reflect any change immediately. NoDelay - Felix does not introduce any delay to the packets. DNS rules may not have been programmed by the time the first packet traverses the policy rules. Client applications need to handle reconnection attempts if initial connection attempts fail. This may be problematic for some applications or for very low DNS TTLs.</p>",
          "UserEditable": true,
          "GoType": "*v3.BPFDNSPolicyMode",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDSROptoutCIDRs",
          "NameEnvVar": "FELIX_BPFDSROptoutCIDRs",
          "NameYAML": "bpfDSROptoutCIDRs",
          "NameGoAPI": "BPFDSROptoutCIDRs",
          "StringSchema": "Comma-delimited list of CIDRs",
          "StringSchemaHTML": "Comma-delimited list of CIDRs",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of CIDRs: `[\"<cidr>\", ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of CIDRs: <code>[\"&lt;cidr&gt;\", ...]</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A list of CIDRs which are excluded from DSR. That is, clients in those CIDRs will access service node ports as if BPFExternalServiceMode was set to Tunnel.",
          "DescriptionHTML": "<p>A list of CIDRs which are excluded from DSR. That is, clients in those CIDRs will access service node ports as if BPFExternalServiceMode was set to Tunnel.</p>",
          "UserEditable": true,
          "GoType": "*[]string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDataIfacePattern",
          "NameEnvVar": "FELIX_BPFDataIfacePattern",
          "NameYAML": "bpfDataIfacePattern",
          "NameGoAPI": "BPFDataIfacePattern",
          "StringSchema": "Regular expression",
          "StringSchemaHTML": "Regular expression",
          "StringDefault": "^((en|wl|ww|sl|ib)[Popsx].*|(eth|wlan|wwan|bond).*|tunl0$|vxlan.calico$|vxlan-v6.calico$|wireguard.cali$|wg-v6.cali$|egress.calico$)",
          "ParsedDefault": "^((en|wl|ww|sl|ib)[Popsx].*|(eth|wlan|wwan|bond).*|tunl0$|vxlan.calico$|vxlan-v6.calico$|wireguard.cali$|wg-v6.cali$|egress.calico$)",
          "ParsedDefaultJSON": "\"^((en|wl|ww|sl|ib)[Popsx].*|(eth|wlan|wwan|bond).*|tunl0$|vxlan.calico$|vxlan-v6.calico$|wireguard.cali$|wg-v6.cali$|egress.calico$)\"",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "^((en|wl|ww|sl|ib)[Popsx].*|(eth|wlan|wwan|bond).*|tunl0$|vxlan.calico$|vxlan-v6.calico$|wireguard.cali$|wg-v6.cali$|egress.calico$)",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network. This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster. It should not match the workload interfaces (usually named cali...).",
          "DescriptionHTML": "<p>A regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network. This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster. It should not match the workload interfaces (usually named cali...).</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDisableGROForIfaces",
          "NameEnvVar": "FELIX_BPFDisableGROForIfaces",
          "NameYAML": "bpfDisableGROForIfaces",
          "NameGoAPI": "BPFDisableGROForIfaces",
          "StringSchema": "Regular expression",
          "StringSchemaHTML": "Regular expression",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "null",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that controls which interfaces Felix should disable the Generic Receive Offload [GRO] option. It should not match the workload interfaces (usually named cali...).",
          "DescriptionHTML": "<p>A regular expression that controls which interfaces Felix should disable the Generic Receive Offload [GRO] option. It should not match the workload interfaces (usually named cali...).</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFDisableUnprivileged",
          "NameEnvVar": "FELIX_BPFDisableUnprivileged",
          "NameYAML": "bpfDisableUnprivileged",
          "NameGoAPI": "BPFDisableUnprivileged",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF. This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's.",
          "DescriptionHTML": "<p>If enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF. This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFEnabled",
          "NameEnvVar": "FELIX_BPFEnabled",
          "NameYAML": "bpfEnabled",
          "NameGoAPI": "BPFEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled Felix will use the BPF dataplane.",
          "DescriptionHTML": "<p>If enabled Felix will use the BPF dataplane.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFEnforceRPF",
          "NameEnvVar": "FELIX_BPFEnforceRPF",
          "NameYAML": "bpfEnforceRPF",
          "NameGoAPI": "BPFEnforceRPF",
          "StringSchema": "One of: `Disabled`, `Loose`, `Strict` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Loose</code>, <code>Strict</code> (case insensitive)",
          "StringDefault": "Loose",
          "ParsedDefault": "Loose",
          "ParsedDefaultJSON": "\"Loose\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Disabled`, `Loose`, `Strict`.",
          "YAMLEnumValues": ["Disabled", "Loose", "Strict"],
          "YAMLSchemaHTML": "One of: <code>Disabled</code>, <code>Loose</code>, <code>Strict</code>.",
          "YAMLDefault": "Loose",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enforce strict RPF on all host interfaces with BPF programs regardless of what is the per-interfaces or global setting. Possible values are Disabled, Strict or Loose.",
          "DescriptionHTML": "<p>Enforce strict RPF on all host interfaces with BPF programs regardless of what is the per-interfaces or global setting. Possible values are Disabled, Strict or Loose.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExcludeCIDRsFromNAT",
          "NameEnvVar": "FELIX_BPFExcludeCIDRsFromNAT",
          "NameYAML": "bpfExcludeCIDRsFromNAT",
          "NameGoAPI": "BPFExcludeCIDRsFromNAT",
          "StringSchema": "Comma-delimited list of CIDRs",
          "StringSchemaHTML": "Comma-delimited list of CIDRs",
          "StringDefault": "",
          "ParsedDefault": "[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of CIDRs: `[\"<cidr>\", ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of CIDRs: <code>[\"&lt;cidr&gt;\", ...]</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A list of CIDRs that are to be excluded from NAT resolution so that host can handle them. A typical usecase is node local DNS cache.",
          "DescriptionHTML": "<p>A list of CIDRs that are to be excluded from NAT resolution so that host can handle them. A typical usecase is node local DNS cache.</p>",
          "UserEditable": true,
          "GoType": "*[]string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExportBufferSizeMB",
          "NameEnvVar": "FELIX_BPFExportBufferSizeMB",
          "NameYAML": "bpfExportBufferSizeMB",
          "NameGoAPI": "BPFExportBufferSizeMB",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "1",
          "ParsedDefault": "1",
          "ParsedDefaultJSON": "1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "1",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls the buffer size used for sending BPF events to felix.",
          "DescriptionHTML": "<p>In BPF mode, controls the buffer size used for sending BPF events to felix.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExtToServiceConnmark",
          "NameEnvVar": "FELIX_BPFExtToServiceConnmark",
          "NameYAML": "bpfExtToServiceConnmark",
          "NameGoAPI": "BPFExtToServiceConnmark",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls a 32bit mark that is set on connections from an external client to a local service. This mark allows us to control how packets of that connection are routed within the host and how is routing interpreted by RPF check.",
          "DescriptionHTML": "<p>In BPF mode, controls a 32bit mark that is set on connections from an external client to a local service. This mark allows us to control how packets of that connection are routed within the host and how is routing interpreted by RPF check.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFExternalServiceMode",
          "NameEnvVar": "FELIX_BPFExternalServiceMode",
          "NameYAML": "bpfExternalServiceMode",
          "NameGoAPI": "BPFExternalServiceMode",
          "StringSchema": "One of: `dsr`, `tunnel` (case insensitive)",
          "StringSchemaHTML": "One of: <code>dsr</code>, <code>tunnel</code> (case insensitive)",
          "StringDefault": "tunnel",
          "ParsedDefault": "tunnel",
          "ParsedDefaultJSON": "\"tunnel\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `DSR`, `Tunnel`.",
          "YAMLEnumValues": ["DSR", "Tunnel"],
          "YAMLSchemaHTML": "One of: <code>DSR</code>, <code>Tunnel</code>.",
          "YAMLDefault": "Tunnel",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads. If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node. If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node. In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.",
          "DescriptionHTML": "<p>In BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads. If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node. If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node. In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFForceTrackPacketsFromIfaces",
          "NameEnvVar": "FELIX_BPFForceTrackPacketsFromIfaces",
          "NameYAML": "bpfForceTrackPacketsFromIfaces",
          "NameGoAPI": "BPFForceTrackPacketsFromIfaces",
          "StringSchema": "Comma-delimited list of strings, each matching the regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringSchemaHTML": "Comma-delimited list of strings, each matching the regex <code>^[a-zA-Z0-9:._+-]{1,15}$</code>",
          "StringDefault": "docker+",
          "ParsedDefault": "[docker+]",
          "ParsedDefaultJSON": "[\"docker+\"]",
          "ParsedType": "[]string",
          "YAMLType": "array",
          "YAMLSchema": "List of interface names (may use `+` as a wildcard: `[\"<name>\", ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of interface names (may use <code>+</code> as a wildcard: <code>[\"&lt;name&gt;\", ...]</code>.",
          "YAMLDefault": "[\"docker+\"]",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, forces traffic from these interfaces to skip Calico's iptables NOTRACK rule, allowing traffic from those interfaces to be tracked by Linux conntrack. Should only be used for interfaces that are not used for the Calico fabric. For example, a docker bridge device for non-Calico-networked containers.",
          "DescriptionHTML": "<p>In BPF mode, forces traffic from these interfaces to skip Calico's iptables NOTRACK rule, allowing traffic from those interfaces to be tracked by Linux conntrack. Should only be used for interfaces that are not used for the Calico fabric. For example, a docker bridge device for non-Calico-networked containers.</p>",
          "UserEditable": true,
          "GoType": "*[]string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFHostConntrackBypass",
          "NameEnvVar": "FELIX_BPFHostConntrackBypass",
          "NameYAML": "bpfHostConntrackBypass",
          "NameGoAPI": "BPFHostConntrackBypass",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether to bypass Linux conntrack in BPF mode for workloads and services.",
          "DescriptionHTML": "<p>Controls whether to bypass Linux conntrack in BPF mode for workloads and services.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFHostNetworkedNATWithoutCTLB",
          "NameEnvVar": "FELIX_BPFHostNetworkedNATWithoutCTLB",
          "NameYAML": "bpfHostNetworkedNATWithoutCTLB",
          "NameGoAPI": "BPFHostNetworkedNATWithoutCTLB",
          "StringSchema": "One of: `Disabled`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Enabled",
          "ParsedDefault": "Enabled",
          "ParsedDefaultJSON": "\"Enabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "Enabled",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When in BPF mode, controls whether Felix does a NAT without CTLB. This along with BPFConnectTimeLoadBalancing determines the CTLB behavior.",
          "DescriptionHTML": "<p>When in BPF mode, controls whether Felix does a NAT without CTLB. This along with BPFConnectTimeLoadBalancing determines the CTLB behavior.</p>",
          "UserEditable": true,
          "GoType": "*v3.BPFHostNetworkedNATType",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFKubeProxyEndpointSlicesEnabled",
          "NameEnvVar": "FELIX_BPFKubeProxyEndpointSlicesEnabled",
          "NameYAML": "bpfKubeProxyEndpointSlicesEnabled",
          "NameGoAPI": "BPFKubeProxyEndpointSlicesEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Deprecated and has no effect. BPF kube-proxy always accepts endpoint slices. This option will be removed in the next release.",
          "DescriptionHTML": "<p>Deprecated and has no effect. BPF kube-proxy always accepts endpoint slices. This option will be removed in the next release.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFKubeProxyIptablesCleanupEnabled",
          "NameEnvVar": "FELIX_BPFKubeProxyIptablesCleanupEnabled",
          "NameYAML": "bpfKubeProxyIptablesCleanupEnabled",
          "NameGoAPI": "BPFKubeProxyIptablesCleanupEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains. Should only be enabled if kube-proxy is not running.",
          "DescriptionHTML": "<p>If enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains. Should only be enabled if kube-proxy is not running.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFKubeProxyMinSyncPeriod",
          "NameEnvVar": "FELIX_BPFKubeProxyMinSyncPeriod",
          "NameYAML": "bpfKubeProxyMinSyncPeriod",
          "NameGoAPI": "BPFKubeProxyMinSyncPeriod",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "1",
          "ParsedDefault": "1s",
          "ParsedDefaultJSON": "1000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "In BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy. Lower values give reduced set-up latency. Higher values reduce Felix CPU usage by batching up more work.",
          "DescriptionHTML": "<p>In BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy. Lower values give reduced set-up latency. Higher values reduce Felix CPU usage by batching up more work.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFL3IfacePattern",
          "NameEnvVar": "FELIX_BPFL3IfacePattern",
          "NameYAML": "bpfL3IfacePattern",
          "NameGoAPI": "BPFL3IfacePattern",
          "StringSchema": "Regular expression",
          "StringSchemaHTML": "Regular expression",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "null",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A regular expression that allows to list tunnel devices like wireguard or vxlan (i.e., L3 devices) in addition to BPFDataIfacePattern. That is, tunnel interfaces not created by Calico, that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.",
          "DescriptionHTML": "<p>A regular expression that allows to list tunnel devices like wireguard or vxlan (i.e., L3 devices) in addition to BPFDataIfacePattern. That is, tunnel interfaces not created by Calico, that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFLogFilters",
          "NameEnvVar": "FELIX_BPFLogFilters",
          "NameYAML": "bpfLogFilters",
          "NameGoAPI": "BPFLogFilters",
          "StringSchema": "Comma-delimited list of key=value pairs",
          "StringSchemaHTML": "Comma-delimited list of key=value pairs",
          "StringDefault": "",
          "ParsedDefault": "map[]",
          "ParsedDefaultJSON": "null",
          "ParsedType": "map[string]string",
          "YAMLType": "object",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "A map of key=values where the value is a pcap filter expression and the key is an interface name with 'all' denoting all interfaces, 'weps' all workload endpoints and 'heps' all host endpoints.\n\nWhen specified as an env var, it accepts a comma-separated list of key=values.",
          "DescriptionHTML": "<p>A map of key=values where the value is a pcap filter expression and the key is an interface name with 'all' denoting all interfaces, 'weps' all workload endpoints and 'heps' all host endpoints.</p>\n<p>When specified as an env var, it accepts a comma-separated list of key=values.</p>",
          "UserEditable": true,
          "GoType": "*map[string]string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFLogLevel",
          "NameEnvVar": "FELIX_BPFLogLevel",
          "NameYAML": "bpfLogLevel",
          "NameGoAPI": "BPFLogLevel",
          "StringSchema": "One of: `debug`, `info`, `off` (case insensitive)",
          "StringSchemaHTML": "One of: <code>debug</code>, <code>info</code>, <code>off</code> (case insensitive)",
          "StringDefault": "off",
          "ParsedDefault": "off",
          "ParsedDefaultJSON": "\"off\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Debug`, `Info`, `Off`.",
          "YAMLEnumValues": ["Debug", "Info", "Off"],
          "YAMLSchemaHTML": "One of: <code>Debug</code>, <code>Info</code>, <code>Off</code>.",
          "YAMLDefault": "Off",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the log level of the BPF programs when in BPF dataplane mode. One of \"Off\", \"Info\", or \"Debug\". The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. .",
          "DescriptionHTML": "<p>Controls the log level of the BPF programs when in BPF dataplane mode. One of \"Off\", \"Info\", or \"Debug\". The logs are emitted to the BPF trace pipe, accessible with the command <code>tc exec bpf debug</code>. .</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeConntrack",
          "NameEnvVar": "FELIX_BPFMapSizeConntrack",
          "NameYAML": "bpfMapSizeConntrack",
          "NameGoAPI": "BPFMapSizeConntrack",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "512000",
          "ParsedDefault": "512000",
          "ParsedDefaultJSON": "512000",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "512000",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for the conntrack map. This map must be large enough to hold an entry for each active connection. Warning: changing the size of the conntrack map can cause disruption.",
          "DescriptionHTML": "<p>Sets the size for the conntrack map. This map must be large enough to hold an entry for each active connection. Warning: changing the size of the conntrack map can cause disruption.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeIPSets",
          "NameEnvVar": "FELIX_BPFMapSizeIPSets",
          "NameYAML": "bpfMapSizeIPSets",
          "NameGoAPI": "BPFMapSizeIPSets",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "1048576",
          "ParsedDefault": "1048576",
          "ParsedDefaultJSON": "1048576",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "1048576",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for ipsets map. The IP sets map must be large enough to hold an entry for each endpoint matched by every selector in the source/destination matches in network policy. Selectors such as \"all()\" can result in large numbers of entries (one entry per endpoint in that case).",
          "DescriptionHTML": "<p>Sets the size for ipsets map. The IP sets map must be large enough to hold an entry for each endpoint matched by every selector in the source/destination matches in network policy. Selectors such as \"all()\" can result in large numbers of entries (one entry per endpoint in that case).</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeIfState",
          "NameEnvVar": "FELIX_BPFMapSizeIfState",
          "NameYAML": "bpfMapSizeIfState",
          "NameGoAPI": "BPFMapSizeIfState",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "1000",
          "ParsedDefault": "1000",
          "ParsedDefaultJSON": "1000",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "1000",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for ifstate map. The ifstate map must be large enough to hold an entry for each device (host + workloads) on a host.",
          "DescriptionHTML": "<p>Sets the size for ifstate map. The ifstate map must be large enough to hold an entry for each device (host + workloads) on a host.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeNATAffinity",
          "NameEnvVar": "FELIX_BPFMapSizeNATAffinity",
          "NameYAML": "bpfMapSizeNATAffinity",
          "NameGoAPI": "BPFMapSizeNATAffinity",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "65536",
          "ParsedDefault": "65536",
          "ParsedDefaultJSON": "65536",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "65536",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size of the BPF map that stores the affinity of a connection (for services that enable that feature.",
          "DescriptionHTML": "<p>Sets the size of the BPF map that stores the affinity of a connection (for services that enable that feature.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeNATBackend",
          "NameEnvVar": "FELIX_BPFMapSizeNATBackend",
          "NameYAML": "bpfMapSizeNATBackend",
          "NameGoAPI": "BPFMapSizeNATBackend",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "262144",
          "ParsedDefault": "262144",
          "ParsedDefaultJSON": "262144",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "262144",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for NAT back end map. This is the total number of endpoints. This is mostly more than the size of the number of services.",
          "DescriptionHTML": "<p>Sets the size for NAT back end map. This is the total number of endpoints. This is mostly more than the size of the number of services.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeNATFrontend",
          "NameEnvVar": "FELIX_BPFMapSizeNATFrontend",
          "NameYAML": "bpfMapSizeNATFrontend",
          "NameGoAPI": "BPFMapSizeNATFrontend",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "65536",
          "ParsedDefault": "65536",
          "ParsedDefaultJSON": "65536",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "65536",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for NAT front end map. FrontendMap should be large enough to hold an entry for each nodeport, external IP and each port in each service.",
          "DescriptionHTML": "<p>Sets the size for NAT front end map. FrontendMap should be large enough to hold an entry for each nodeport, external IP and each port in each service.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFMapSizeRoute",
          "NameEnvVar": "FELIX_BPFMapSizeRoute",
          "NameYAML": "bpfMapSizeRoute",
          "NameGoAPI": "BPFMapSizeRoute",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "262144",
          "ParsedDefault": "262144",
          "ParsedDefaultJSON": "262144",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "262144",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the size for the routes map. The routes map should be large enough to hold one entry per workload and a handful of entries per host (enough to cover its own IPs and tunnel IPs).",
          "DescriptionHTML": "<p>Sets the size for the routes map. The routes map should be large enough to hold one entry per workload and a handful of entries per host (enough to cover its own IPs and tunnel IPs).</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFPSNATPorts",
          "NameEnvVar": "FELIX_BPFPSNATPorts",
          "NameYAML": "bpfPSNATPorts",
          "NameGoAPI": "BPFPSNATPorts",
          "StringSchema": "Port range: either a single number in [0,65535] or a range of numbers `n:m`",
          "StringSchemaHTML": "Port range: either a single number in [0,65535] or a range of numbers <code>n:m</code>",
          "StringDefault": "20000:29999",
          "ParsedDefault": "20000:29999",
          "ParsedDefaultJSON": "\"20000:29999\"",
          "ParsedType": "numorstring.Port",
          "YAMLType": "integer or string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "20000:29999",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the range from which we randomly pick a port if there is a source port collision. This should be within the ephemeral range as defined by RFC 6056 (1024–65535) and preferably outside the ephemeral ranges used by common operating systems. Linux uses 32768–60999, while others mostly use the IANA defined range 49152–65535. It is not necessarily a problem if this range overlaps with the operating systems. Both ends of the range are inclusive.",
          "DescriptionHTML": "<p>Sets the range from which we randomly pick a port if there is a source port collision. This should be within the ephemeral range as defined by RFC 6056 (1024–65535) and preferably outside the ephemeral ranges used by common operating systems. Linux uses 32768–60999, while others mostly use the IANA defined range 49152–65535. It is not necessarily a problem if this range overlaps with the operating systems. Both ends of the range are inclusive.</p>",
          "UserEditable": true,
          "GoType": "*numorstring.Port",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFPolicyDebugEnabled",
          "NameEnvVar": "FELIX_BPFPolicyDebugEnabled",
          "NameYAML": "bpfPolicyDebugEnabled",
          "NameGoAPI": "BPFPolicyDebugEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When true, Felix records detailed information about the BPF policy programs, which can be examined with the calico-bpf command-line tool.",
          "DescriptionHTML": "<p>When true, Felix records detailed information about the BPF policy programs, which can be examined with the calico-bpf command-line tool.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: eBPF",
          "GroupWithSortPrefix": "22 Dataplane: eBPF",
          "NameConfigFile": "BPFRedirectToPeer",
          "NameEnvVar": "FELIX_BPFRedirectToPeer",
          "NameYAML": "bpfRedirectToPeer",
          "NameGoAPI": "BPFRedirectToPeer",
          "StringSchema": "One of: `Disabled`, `Enabled`, `L2Only` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code>, <code>L2Only</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disabled\"`, `\"Enabled\"`, `\"L2Only\"`.",
          "YAMLEnumValues": ["Disabled", "Enabled", "L2Only"],
          "YAMLSchemaHTML": "One of: <code>\"Disabled\"</code>, <code>\"Enabled\"</code>, <code>\"L2Only\"</code>.",
          "YAMLDefault": "Disabled",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which whether it is allowed to forward straight to the peer side of the workload devices. It is allowed for any host L2 devices by default (L2Only), but it breaks TCP dump on the host side of workload device as it bypasses it on ingress. Value of Enabled also allows redirection from L3 host devices like IPIP tunnel or Wireguard directly to the peer side of the workload's device. This makes redirection faster, however, it breaks tools like tcpdump on the peer side. Use Enabled with caution.",
          "DescriptionHTML": "<p>Controls which whether it is allowed to forward straight to the peer side of the workload devices. It is allowed for any host L2 devices by default (L2Only), but it breaks TCP dump on the host side of workload device as it bypasses it on ingress. Value of Enabled also allows redirection from L3 host devices like IPIP tunnel or Wireguard directly to the peer side of the workload's device. This makes redirection faster, however, it breaks tools like tcpdump on the peer side. Use Enabled with caution.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Dataplane: Windows",
      "Fields": [
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsDNSCacheFile",
          "NameEnvVar": "FELIX_WindowsDNSCacheFile",
          "NameYAML": "windowsDnsCacheFile",
          "NameGoAPI": "WindowsDNSCacheFile",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "c:\\TigeraCalico\\felix-dns-cache.txt",
          "ParsedDefault": "c:\\TigeraCalico\\felix-dns-cache.txt",
          "ParsedDefaultJSON": "\"c:\\\\TigeraCalico\\\\felix-dns-cache.txt\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "c:\\TigeraCalico\\felix-dns-cache.txt",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The name of the file that Felix uses to preserve learnt DNS information when restarting. .",
          "DescriptionHTML": "<p>The name of the file that Felix uses to preserve learnt DNS information when restarting. .</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsDNSExtraTTL",
          "NameEnvVar": "FELIX_WindowsDNSExtraTTL",
          "NameYAML": "windowsDnsExtraTTL",
          "NameGoAPI": "WindowsDNSExtraTTL",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "120",
          "ParsedDefault": "2m0s",
          "ParsedDefaultJSON": "120000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "2m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Extra time to keep IPs and alias names that are learnt from DNS, in addition to each name or IP's advertised TTL. The default value is 120s which is same as the default value of ServicePointManager.DnsRefreshTimeout on .net framework. .",
          "DescriptionHTML": "<p>Extra time to keep IPs and alias names that are learnt from DNS, in addition to each name or IP's advertised TTL. The default value is 120s which is same as the default value of ServicePointManager.DnsRefreshTimeout on .net framework. .</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsFlowLogsFileDirectory",
          "NameEnvVar": "FELIX_WindowsFlowLogsFileDirectory",
          "NameYAML": "windowsFlowLogsFileDirectory",
          "NameGoAPI": "WindowsFlowLogsFileDirectory",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "c:\\TigeraCalico\\flowlogs",
          "ParsedDefault": "c:\\TigeraCalico\\flowlogs",
          "ParsedDefaultJSON": "\"c:\\\\TigeraCalico\\\\flowlogs\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "c:\\TigeraCalico\\flowlogs",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the directory where flow logs files are stored on Windows nodes. .",
          "DescriptionHTML": "<p>Sets the directory where flow logs files are stored on Windows nodes. .</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsFlowLogsPositionFilePath",
          "NameEnvVar": "FELIX_WindowsFlowLogsPositionFilePath",
          "NameYAML": "windowsFlowLogsPositionFilePath",
          "NameGoAPI": "WindowsFlowLogsPositionFilePath",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "c:\\TigeraCalico\\flowlogs\\flows.log.pos",
          "ParsedDefault": "c:\\TigeraCalico\\flowlogs\\flows.log.pos",
          "ParsedDefaultJSON": "\"c:\\\\TigeraCalico\\\\flowlogs\\\\flows.log.pos\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "c:\\TigeraCalico\\flowlogs\\flows.log.pos",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to specify the position of the external pipeline that reads flow logs on Windows nodes. . This parameter only takes effect when FlowLogsDynamicAggregationEnabled is set to true.",
          "DescriptionHTML": "<p>Used to specify the position of the external pipeline that reads flow logs on Windows nodes. . This parameter only takes effect when FlowLogsDynamicAggregationEnabled is set to true.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsManageFirewallRules",
          "NameEnvVar": "FELIX_WindowsManageFirewallRules",
          "NameYAML": "windowsManageFirewallRules",
          "NameGoAPI": "WindowsManageFirewallRules",
          "StringSchema": "One of: `Disabled`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disabled\"`, `\"Enabled\"`.",
          "YAMLEnumValues": ["Disabled", "Enabled"],
          "YAMLSchemaHTML": "One of: <code>\"Disabled\"</code>, <code>\"Enabled\"</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures whether or not Felix will program Windows Firewall rules (to allow inbound access to its own metrics ports).",
          "DescriptionHTML": "<p>Configures whether or not Felix will program Windows Firewall rules (to allow inbound access to its own metrics ports).</p>",
          "UserEditable": true,
          "GoType": "*v3.WindowsManageFirewallRulesMode",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsNetworkName",
          "NameEnvVar": "FELIX_WindowsNetworkName",
          "NameYAML": "windowsNetworkName",
          "NameGoAPI": "WindowsNetworkName",
          "StringSchema": "Regular expression",
          "StringSchemaHTML": "Regular expression",
          "StringDefault": "(?i)calico.*",
          "ParsedDefault": "(?i)calico.*",
          "ParsedDefaultJSON": "\"(?i)calico.*\"",
          "ParsedType": "*regexp.Regexp",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "(?i)calico.*",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies which Windows HNS networks Felix should operate on. The default is to match networks that start with \"calico\". Supports regular expression syntax.",
          "DescriptionHTML": "<p>Specifies which Windows HNS networks Felix should operate on. The default is to match networks that start with \"calico\". Supports regular expression syntax.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: Windows",
          "GroupWithSortPrefix": "23 Dataplane: Windows",
          "NameConfigFile": "WindowsStatsDumpFilePath",
          "NameEnvVar": "FELIX_WindowsStatsDumpFilePath",
          "NameYAML": "windowsStatsDumpFilePath",
          "NameGoAPI": "WindowsStatsDumpFilePath",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "c:\\TigeraCalico\\stats\\dump",
          "ParsedDefault": "c:\\TigeraCalico\\stats\\dump",
          "ParsedDefaultJSON": "\"c:\\\\TigeraCalico\\\\stats\\\\dump\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "c:\\TigeraCalico\\stats\\dump",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "Used to specify the path of the stats dump file on Windows nodes.",
          "DescriptionHTML": "<p>Used to specify the path of the stats dump file on Windows nodes.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Dataplane: OpenStack support",
      "Fields": [
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "EndpointReportingDelaySecs",
          "NameEnvVar": "FELIX_EndpointReportingDelaySecs",
          "NameYAML": "endpointReportingDelay",
          "NameGoAPI": "EndpointReportingDelay",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "1",
          "ParsedDefault": "1s",
          "ParsedDefaultJSON": "1000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nThe delay before Felix reports endpoint status to the datastore. This is only used by the OpenStack integration.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>The delay before Felix reports endpoint status to the datastore. This is only used by the OpenStack integration.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": true
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "EndpointReportingEnabled",
          "NameEnvVar": "FELIX_EndpointReportingEnabled",
          "NameYAML": "endpointReportingEnabled",
          "NameGoAPI": "EndpointReportingEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nControls whether Felix reports endpoint status to the datastore. This is only used by the OpenStack integration.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>Controls whether Felix reports endpoint status to the datastore. This is only used by the OpenStack integration.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": true
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "MetadataAddr",
          "NameEnvVar": "FELIX_MetadataAddr",
          "NameYAML": "metadataAddr",
          "NameGoAPI": "MetadataAddr",
          "StringSchema": "String matching regex `^[a-zA-Z0-9_.-]+$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9_.-]+$</code>",
          "StringDefault": "127.0.0.1",
          "ParsedDefault": "127.0.0.1",
          "ParsedDefaultJSON": "\"127.0.0.1\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "127.0.0.1",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nThe IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case-insensitive) means that Felix should not set up any NAT rule for the metadata path.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>The IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case-insensitive) means that Felix should not set up any NAT rule for the metadata path.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": true
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "MetadataPort",
          "NameEnvVar": "FELIX_MetadataPort",
          "NameYAML": "metadataPort",
          "NameGoAPI": "MetadataPort",
          "StringSchema": "Integer: [0,65535]",
          "StringSchemaHTML": "Integer: [0,65535]",
          "StringDefault": "8775",
          "ParsedDefault": "8775",
          "ParsedDefaultJSON": "8775",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [0,65535]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [0,65535]",
          "YAMLDefault": "8775",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nThe port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed .",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>The port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed .</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": true
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "OpenstackRegion",
          "NameEnvVar": "FELIX_OpenstackRegion",
          "NameYAML": "openstackRegion",
          "NameGoAPI": "OpenstackRegion",
          "StringSchema": "OpenStack region name (must be a valid DNS label)",
          "StringSchemaHTML": "OpenStack region name (must be a valid DNS label)",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nThe name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>The name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": true
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "ReportingIntervalSecs",
          "NameEnvVar": "FELIX_ReportingIntervalSecs",
          "NameYAML": "reportingInterval",
          "NameGoAPI": "ReportingInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "30",
          "ParsedDefault": "30s",
          "ParsedDefaultJSON": "30000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nThe interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>The interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": true
        },
        {
          "Group": "Dataplane: OpenStack support",
          "GroupWithSortPrefix": "25 Dataplane: OpenStack support",
          "NameConfigFile": "ReportingTTLSecs",
          "NameEnvVar": "FELIX_ReportingTTLSecs",
          "NameYAML": "reportingTTL",
          "NameGoAPI": "ReportingTTL",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedDefaultJSON": "90000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "**Open source-only parameter**; OpenStack is not supported in Calico Enterprise/Cloud.\n\nThe time-to-live setting for process-wide status reports.",
          "DescriptionHTML": "<p><b>Open source-only parameter</b>; OpenStack is not supported in Calico Enterprise/Cloud.</p>\n<p>The time-to-live setting for process-wide status reports.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": true
        }
      ]
    },
    {
      "Name": "Dataplane: XDP acceleration for iptables dataplane",
      "Fields": [
        {
          "Group": "Dataplane: XDP acceleration for iptables dataplane",
          "GroupWithSortPrefix": "25 Dataplane: XDP acceleration for iptables dataplane",
          "NameConfigFile": "GenericXDPEnabled",
          "NameEnvVar": "FELIX_GenericXDPEnabled",
          "NameYAML": "genericXDPEnabled",
          "NameGoAPI": "GenericXDPEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables.",
          "DescriptionHTML": "<p>Enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: XDP acceleration for iptables dataplane",
          "GroupWithSortPrefix": "25 Dataplane: XDP acceleration for iptables dataplane",
          "NameConfigFile": "XDPEnabled",
          "NameEnvVar": "FELIX_XDPEnabled",
          "NameYAML": "xdpEnabled",
          "NameGoAPI": "XDPEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables XDP acceleration for suitable untracked incoming deny rules.",
          "DescriptionHTML": "<p>Enables XDP acceleration for suitable untracked incoming deny rules.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Dataplane: XDP acceleration for iptables dataplane",
          "GroupWithSortPrefix": "25 Dataplane: XDP acceleration for iptables dataplane",
          "NameConfigFile": "XDPRefreshInterval",
          "NameEnvVar": "FELIX_XDPRefreshInterval",
          "NameYAML": "xdpRefreshInterval",
          "NameGoAPI": "XDPRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "90",
          "ParsedDefault": "1m30s",
          "ParsedDefaultJSON": "90000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh.",
          "DescriptionHTML": "<p>The period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Overlay: VXLAN overlay",
      "Fields": [
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANEnabled",
          "NameEnvVar": "FELIX_VXLANEnabled",
          "NameYAML": "vxlanEnabled",
          "NameGoAPI": "VXLANEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "null",
          "ParsedType": "*bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Overrides whether Felix should create the VXLAN tunnel device for IPv4 VXLAN networking. Optional as Felix determines this based on the existing IP pools.",
          "DescriptionHTML": "<p>Overrides whether Felix should create the VXLAN tunnel device for IPv4 VXLAN networking. Optional as Felix determines this based on the existing IP pools.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANMTU",
          "NameEnvVar": "FELIX_VXLANMTU",
          "NameYAML": "vxlanMTU",
          "NameGoAPI": "VXLANMTU",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The MTU to set on the IPv4 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.",
          "DescriptionHTML": "<p>The MTU to set on the IPv4 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANMTUV6",
          "NameEnvVar": "FELIX_VXLANMTUV6",
          "NameYAML": "vxlanMTUV6",
          "NameGoAPI": "VXLANMTUV6",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The MTU to set on the IPv6 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.",
          "DescriptionHTML": "<p>The MTU to set on the IPv6 VXLAN tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANPort",
          "NameEnvVar": "FELIX_VXLANPort",
          "NameYAML": "vxlanPort",
          "NameGoAPI": "VXLANPort",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "4789",
          "ParsedDefault": "4789",
          "ParsedDefaultJSON": "4789",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "4789",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The UDP port number to use for VXLAN traffic.",
          "DescriptionHTML": "<p>The UDP port number to use for VXLAN traffic.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: VXLAN overlay",
          "GroupWithSortPrefix": "31 Overlay: VXLAN overlay",
          "NameConfigFile": "VXLANVNI",
          "NameEnvVar": "FELIX_VXLANVNI",
          "NameYAML": "vxlanVNI",
          "NameGoAPI": "VXLANVNI",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "4096",
          "ParsedDefault": "4096",
          "ParsedDefaultJSON": "4096",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "4096",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The VXLAN VNI to use for VXLAN traffic. You may need to change this if the default value is in use on your system.",
          "DescriptionHTML": "<p>The VXLAN VNI to use for VXLAN traffic. You may need to change this if the default value is in use on your system.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Overlay: IP-in-IP",
      "Fields": [
        {
          "Group": "Overlay: IP-in-IP",
          "GroupWithSortPrefix": "32 Overlay: IP-in-IP",
          "NameConfigFile": "IpInIpEnabled",
          "NameEnvVar": "FELIX_IpInIpEnabled",
          "NameYAML": "ipipEnabled",
          "NameGoAPI": "IPIPEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "null",
          "ParsedType": "*bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Overrides whether Felix should configure an IPIP interface on the host. Optional as Felix determines this based on the existing IP pools.",
          "DescriptionHTML": "<p>Overrides whether Felix should configure an IPIP interface on the host. Optional as Felix determines this based on the existing IP pools.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IP-in-IP",
          "GroupWithSortPrefix": "32 Overlay: IP-in-IP",
          "NameConfigFile": "IpInIpMtu",
          "NameEnvVar": "FELIX_IpInIpMtu",
          "NameYAML": "ipipMTU",
          "NameGoAPI": "IPIPMTU",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the MTU to set on the IPIP tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.",
          "DescriptionHTML": "<p>Controls the MTU to set on the IPIP tunnel device. Optional as Felix auto-detects the MTU based on the MTU of the host's interfaces.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Overlay: Wireguard",
      "Fields": [
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardEnabled",
          "NameEnvVar": "FELIX_WireguardEnabled",
          "NameYAML": "wireguardEnabled",
          "NameGoAPI": "WireguardEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Wireguard is enabled for IPv4 (encapsulating IPv4 traffic over an IPv4 underlay network).",
          "DescriptionHTML": "<p>Controls whether Wireguard is enabled for IPv4 (encapsulating IPv4 traffic over an IPv4 underlay network).</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardEnabledV6",
          "NameEnvVar": "FELIX_WireguardEnabledV6",
          "NameYAML": "wireguardEnabledV6",
          "NameGoAPI": "WireguardEnabledV6",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Wireguard is enabled for IPv6 (encapsulating IPv6 traffic over an IPv6 underlay network).",
          "DescriptionHTML": "<p>Controls whether Wireguard is enabled for IPv6 (encapsulating IPv6 traffic over an IPv6 underlay network).</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardHostEncryptionEnabled",
          "NameEnvVar": "FELIX_WireguardHostEncryptionEnabled",
          "NameYAML": "wireguardHostEncryptionEnabled",
          "NameGoAPI": "WireguardHostEncryptionEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Wireguard host-to-host encryption is enabled.",
          "DescriptionHTML": "<p>Controls whether Wireguard host-to-host encryption is enabled.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardInterfaceName",
          "NameEnvVar": "FELIX_WireguardInterfaceName",
          "NameYAML": "wireguardInterfaceName",
          "NameGoAPI": "WireguardInterfaceName",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9:._+-]{1,15}$</code>",
          "StringDefault": "wireguard.cali",
          "ParsedDefault": "wireguard.cali",
          "ParsedDefaultJSON": "\"wireguard.cali\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "wireguard.cali",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the name to use for the IPv4 Wireguard interface.",
          "DescriptionHTML": "<p>Specifies the name to use for the IPv4 Wireguard interface.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardInterfaceNameV6",
          "NameEnvVar": "FELIX_WireguardInterfaceNameV6",
          "NameYAML": "wireguardInterfaceNameV6",
          "NameGoAPI": "WireguardInterfaceNameV6",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,15}$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9:._+-]{1,15}$</code>",
          "StringDefault": "wg-v6.cali",
          "ParsedDefault": "wg-v6.cali",
          "ParsedDefaultJSON": "\"wg-v6.cali\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "wg-v6.cali",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the name to use for the IPv6 Wireguard interface.",
          "DescriptionHTML": "<p>Specifies the name to use for the IPv6 Wireguard interface.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardListeningPort",
          "NameEnvVar": "FELIX_WireguardListeningPort",
          "NameYAML": "wireguardListeningPort",
          "NameGoAPI": "WireguardListeningPort",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "51820",
          "ParsedDefault": "51820",
          "ParsedDefaultJSON": "51820",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "51820",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the listening port used by IPv4 Wireguard.",
          "DescriptionHTML": "<p>Controls the listening port used by IPv4 Wireguard.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardListeningPortV6",
          "NameEnvVar": "FELIX_WireguardListeningPortV6",
          "NameYAML": "wireguardListeningPortV6",
          "NameGoAPI": "WireguardListeningPortV6",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "51821",
          "ParsedDefault": "51821",
          "ParsedDefaultJSON": "51821",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "51821",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the listening port used by IPv6 Wireguard.",
          "DescriptionHTML": "<p>Controls the listening port used by IPv6 Wireguard.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardMTU",
          "NameEnvVar": "FELIX_WireguardMTU",
          "NameYAML": "wireguardMTU",
          "NameGoAPI": "WireguardMTU",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the MTU on the IPv4 Wireguard interface. See Configuring MTU.",
          "DescriptionHTML": "<p>Controls the MTU on the IPv4 Wireguard interface. See Configuring MTU.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardMTUV6",
          "NameEnvVar": "FELIX_WireguardMTUV6",
          "NameYAML": "wireguardMTUV6",
          "NameGoAPI": "WireguardMTUV6",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the MTU on the IPv6 Wireguard interface. See Configuring MTU.",
          "DescriptionHTML": "<p>Controls the MTU on the IPv6 Wireguard interface. See Configuring MTU.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardPersistentKeepAlive",
          "NameEnvVar": "FELIX_WireguardPersistentKeepAlive",
          "NameYAML": "wireguardKeepAlive",
          "NameGoAPI": "WireguardPersistentKeepAlive",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls Wireguard PersistentKeepalive option. Set 0 to disable.",
          "DescriptionHTML": "<p>Controls Wireguard PersistentKeepalive option. Set 0 to disable.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: Wireguard",
          "GroupWithSortPrefix": "33 Overlay: Wireguard",
          "NameConfigFile": "WireguardRoutingRulePriority",
          "NameEnvVar": "FELIX_WireguardRoutingRulePriority",
          "NameYAML": "wireguardRoutingRulePriority",
          "NameGoAPI": "WireguardRoutingRulePriority",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "99",
          "ParsedDefault": "99",
          "ParsedDefaultJSON": "99",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "99",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the priority value to use for the Wireguard routing rule.",
          "DescriptionHTML": "<p>Controls the priority value to use for the Wireguard routing rule.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Overlay: IPSec",
      "Fields": [
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecAllowUnsecuredTraffic",
          "NameEnvVar": "FELIX_IPSecAllowUnsecuredTraffic",
          "NameYAML": "ipsecAllowUnsecuredTraffic",
          "NameGoAPI": "IPSecAllowUnsecuredTraffic",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether non-IPsec traffic is allowed in addition to IPsec traffic. Enabling this negates the anti-spoofing protections of IPsec but it is useful when migrating to/from IPsec.",
          "DescriptionHTML": "<p>Controls whether non-IPsec traffic is allowed in addition to IPsec traffic. Enabling this negates the anti-spoofing protections of IPsec but it is useful when migrating to/from IPsec.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecESPAlgorithm",
          "NameEnvVar": "FELIX_IPSecESPAlgorithm",
          "NameYAML": "ipsecESPAlgorithm",
          "NameGoAPI": "IPSecESPAlgorithm",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "aes128gcm16-ecp256",
          "ParsedDefault": "aes128gcm16-ecp256",
          "ParsedDefaultJSON": "\"aes128gcm16-ecp256\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "aes128gcm16-ecp256",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "IPSecESAlgorithm sets IPSec ESP algorithm. Default is NIST suite B recommendation.",
          "DescriptionHTML": "<p>IPSecESAlgorithm sets IPSec ESP algorithm. Default is NIST suite B recommendation.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecIKEAlgorithm",
          "NameEnvVar": "FELIX_IPSecIKEAlgorithm",
          "NameYAML": "ipsecIKEAlgorithm",
          "NameGoAPI": "IPSecIKEAlgorithm",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "aes128gcm16-prfsha256-ecp256",
          "ParsedDefault": "aes128gcm16-prfsha256-ecp256",
          "ParsedDefaultJSON": "\"aes128gcm16-prfsha256-ecp256\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "aes128gcm16-prfsha256-ecp256",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets IPSec IKE algorithm. Default is NIST suite B recommendation.",
          "DescriptionHTML": "<p>Sets IPSec IKE algorithm. Default is NIST suite B recommendation.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecLogLevel",
          "NameEnvVar": "FELIX_IPSecLogLevel",
          "NameYAML": "ipsecLogLevel",
          "NameGoAPI": "IPSecLogLevel",
          "StringSchema": "One of: `DEBUG`, `INFO`, `NOTICE`, `VERBOSE` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DEBUG</code>, <code>INFO</code>, <code>NOTICE</code>, <code>VERBOSE</code> (case insensitive)",
          "StringDefault": "INFO",
          "ParsedDefault": "INFO",
          "ParsedDefaultJSON": "\"INFO\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Debug`, `Info`, `None`, `Notice`, `Verbose`.",
          "YAMLEnumValues": ["Debug", "Info", "None", "Notice", "Verbose"],
          "YAMLSchemaHTML": "One of: <code>Debug</code>, <code>Info</code>, <code>None</code>, <code>Notice</code>, <code>Verbose</code>.",
          "YAMLDefault": "Info",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls log level for IPSec components. Set to None for no logging. A generic log level terminology is used [None, Notice, Info, Debug, Verbose].",
          "DescriptionHTML": "<p>Controls log level for IPSec components. Set to None for no logging. A generic log level terminology is used [None, Notice, Info, Debug, Verbose].</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecMode",
          "NameEnvVar": "FELIX_IPSecMode",
          "NameYAML": "ipsecMode",
          "NameGoAPI": "IPSecMode",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls which mode IPSec is operating on. Default value means IPSec is not enabled.",
          "DescriptionHTML": "<p>Controls which mode IPSec is operating on. Default value means IPSec is not enabled.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecPSKFile",
          "NameEnvVar": "FELIX_IPSecPSKFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "File contains PSK.",
          "DescriptionHTML": "<p>File contains PSK.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Overlay: IPSec",
          "GroupWithSortPrefix": "34 Overlay: IPSec",
          "NameConfigFile": "IPSecPolicyRefreshInterval",
          "NameEnvVar": "FELIX_IPSecPolicyRefreshInterval",
          "NameYAML": "ipsecPolicyRefreshInterval",
          "NameGoAPI": "IPSecPolicyRefreshInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "600",
          "ParsedDefault": "10m0s",
          "ParsedDefaultJSON": "600000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "10m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The interval at which Felix will check the kernel's IPsec policy tables and repair any inconsistencies.",
          "DescriptionHTML": "<p>The interval at which Felix will check the kernel's IPsec policy tables and repair any inconsistencies.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Flow logs: Prometheus reports",
      "Fields": [
        {
          "Group": "Flow logs: Prometheus reports",
          "GroupWithSortPrefix": "40 Flow logs: Prometheus reports",
          "NameConfigFile": "DeletedMetricsRetentionSecs",
          "NameEnvVar": "FELIX_DeletedMetricsRetentionSecs",
          "NameYAML": "deletedMetricsRetentionSecs",
          "NameGoAPI": "DeletedMetricsRetentionSecs",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "30",
          "ParsedDefault": "30s",
          "ParsedDefaultJSON": "30000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "integer",
          "YAMLSchema": "Integer.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer.",
          "YAMLDefault": "30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls how long metrics are retianed after the flow is gone.",
          "DescriptionHTML": "<p>Controls how long metrics are retianed after the flow is gone.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Prometheus reports",
          "GroupWithSortPrefix": "40 Flow logs: Prometheus reports",
          "NameConfigFile": "PrometheusReporterCAFile",
          "NameEnvVar": "FELIX_PrometheusReporterCAFile",
          "NameYAML": "prometheusReporterCAFile",
          "NameGoAPI": "PrometheusReporterCAFile",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the TLS CA file for the Prometheus per-flow metrics reporter.",
          "DescriptionHTML": "<p>The path to the TLS CA file for the Prometheus per-flow metrics reporter.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Prometheus reports",
          "GroupWithSortPrefix": "40 Flow logs: Prometheus reports",
          "NameConfigFile": "PrometheusReporterCertFile",
          "NameEnvVar": "FELIX_PrometheusReporterCertFile",
          "NameYAML": "prometheusReporterCertFile",
          "NameGoAPI": "PrometheusReporterCertFile",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the TLS certificate file for the Prometheus per-flow metrics reporter.",
          "DescriptionHTML": "<p>The path to the TLS certificate file for the Prometheus per-flow metrics reporter.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Prometheus reports",
          "GroupWithSortPrefix": "40 Flow logs: Prometheus reports",
          "NameConfigFile": "PrometheusReporterEnabled",
          "NameEnvVar": "FELIX_PrometheusReporterEnabled",
          "NameYAML": "prometheusReporterEnabled",
          "NameGoAPI": "PrometheusReporterEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether the Prometheus per-flow metrics reporter is enabled. This is used to show real-time flow metrics in the UI.",
          "DescriptionHTML": "<p>Controls whether the Prometheus per-flow metrics reporter is enabled. This is used to show real-time flow metrics in the UI.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Prometheus reports",
          "GroupWithSortPrefix": "40 Flow logs: Prometheus reports",
          "NameConfigFile": "PrometheusReporterKeyFile",
          "NameEnvVar": "FELIX_PrometheusReporterKeyFile",
          "NameYAML": "prometheusReporterKeyFile",
          "NameGoAPI": "PrometheusReporterKeyFile",
          "StringSchema": "Path to file, which must exist",
          "StringSchemaHTML": "Path to file, which must exist",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to the TLS private key file for the Prometheus per-flow metrics reporter.",
          "DescriptionHTML": "<p>The path to the TLS private key file for the Prometheus per-flow metrics reporter.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Prometheus reports",
          "GroupWithSortPrefix": "40 Flow logs: Prometheus reports",
          "NameConfigFile": "PrometheusReporterPort",
          "NameEnvVar": "FELIX_PrometheusReporterPort",
          "NameYAML": "prometheusReporterPort",
          "NameGoAPI": "PrometheusReporterPort",
          "StringSchema": "Integer: [0,65535]",
          "StringSchemaHTML": "Integer: [0,65535]",
          "StringDefault": "9092",
          "ParsedDefault": "9092",
          "ParsedDefaultJSON": "9092",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [0,65535]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [0,65535]",
          "YAMLDefault": "9092",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The port that the Prometheus per-flow metrics reporter should bind to.",
          "DescriptionHTML": "<p>The port that the Prometheus per-flow metrics reporter should bind to.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Flow logs: Syslog reports",
      "Fields": [
        {
          "Group": "Flow logs: Syslog reports",
          "GroupWithSortPrefix": "40 Flow logs: Syslog reports",
          "NameConfigFile": "SyslogReporterAddress",
          "NameEnvVar": "FELIX_SyslogReporterAddress",
          "NameYAML": "syslogReporterAddress",
          "NameGoAPI": "SyslogReporterAddress",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The address to dial to when writing to Syslog. For TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address, or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name. For more, see: https://pkg.go.dev/net#Dial.",
          "DescriptionHTML": "<p>The address to dial to when writing to Syslog. For TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address, or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name. For more, see: https://pkg.go.dev/net#Dial.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Syslog reports",
          "GroupWithSortPrefix": "40 Flow logs: Syslog reports",
          "NameConfigFile": "SyslogReporterEnabled",
          "NameEnvVar": "FELIX_SyslogReporterEnabled",
          "NameYAML": "syslogReporterEnabled",
          "NameGoAPI": "SyslogReporterEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Turns on the feature to write logs to Syslog. Please note that this can incur significant disk space usage when running felix on non-cluster hosts.",
          "DescriptionHTML": "<p>Turns on the feature to write logs to Syslog. Please note that this can incur significant disk space usage when running felix on non-cluster hosts.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: Syslog reports",
          "GroupWithSortPrefix": "40 Flow logs: Syslog reports",
          "NameConfigFile": "SyslogReporterNetwork",
          "NameEnvVar": "FELIX_SyslogReporterNetwork",
          "NameYAML": "syslogReporterNetwork",
          "NameGoAPI": "SyslogReporterNetwork",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The network to dial to when writing to Syslog. Known networks are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only), \"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\". For more, see: https://pkg.go.dev/net#Dial.",
          "DescriptionHTML": "<p>The network to dial to when writing to Syslog. Known networks are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only), \"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\". For more, see: https://pkg.go.dev/net#Dial.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Flow logs: file reports",
      "Fields": [
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsAggregationThresholdBytes",
          "NameEnvVar": "FELIX_FlowLogsAggregationThresholdBytes",
          "NameYAML": "flowLogsAggregationThresholdBytes",
          "NameGoAPI": "FlowLogsAggregationThresholdBytes",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "8192",
          "ParsedDefault": "8192",
          "ParsedDefaultJSON": "8192",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "8192",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used specify how far behind the external pipeline that reads flow logs can be. Default is 8192 bytes. This parameter only takes effect when FlowLogsDynamicAggregationEnabled is set to true.",
          "DescriptionHTML": "<p>Used specify how far behind the external pipeline that reads flow logs can be. Default is 8192 bytes. This parameter only takes effect when FlowLogsDynamicAggregationEnabled is set to true.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsCollectProcessInfo",
          "NameEnvVar": "FELIX_FlowLogsCollectProcessInfo",
          "NameYAML": "flowLogsCollectProcessInfo",
          "NameGoAPI": "FlowLogsCollectProcessInfo",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If enabled Felix will load the kprobe BPF programs to collect process info.",
          "DescriptionHTML": "<p>If enabled Felix will load the kprobe BPF programs to collect process info.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsCollectProcessPath",
          "NameEnvVar": "FELIX_FlowLogsCollectProcessPath",
          "NameYAML": "flowLogsCollectProcessPath",
          "NameGoAPI": "FlowLogsCollectProcessPath",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When FlowLogsCollectProcessPath and FlowLogsCollectProcessInfo are both enabled, each flow log will include information about the process that is sending or receiving the packets in that flow: the `process_name` field will contain the full path of the process executable, and the `process_args` field will have the arguments with which the executable was invoked. Process information will not be reported for connections which use raw sockets.",
          "DescriptionHTML": "<p>When FlowLogsCollectProcessPath and FlowLogsCollectProcessInfo are both enabled, each flow log will include information about the process that is sending or receiving the packets in that flow: the <code>process_name</code> field will contain the full path of the process executable, and the <code>process_args</code> field will have the arguments with which the executable was invoked. Process information will not be reported for connections which use raw sockets.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsCollectTcpStats",
          "NameEnvVar": "FELIX_FlowLogsCollectTcpStats",
          "NameYAML": "flowLogsCollectTcpStats",
          "NameGoAPI": "FlowLogsCollectTcpStats",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables flow logs reporting TCP socket stats.",
          "DescriptionHTML": "<p>Enables flow logs reporting TCP socket stats.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsCollectorDebugTrace",
          "NameEnvVar": "FELIX_FlowLogsCollectorDebugTrace",
          "NameYAML": "flowLogsCollectorDebugTrace",
          "NameGoAPI": "FlowLogsCollectorDebugTrace",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When FlowLogsCollectorDebugTrace is set to true, enables the logs in the collector to be printed in their entirety.",
          "DescriptionHTML": "<p>When FlowLogsCollectorDebugTrace is set to true, enables the logs in the collector to be printed in their entirety.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsDestDomainsByClient",
          "NameEnvVar": "FELIX_FlowLogsDestDomainsByClient",
          "NameYAML": "flowLogsDestDomainsByClient",
          "NameGoAPI": "FlowLogsDestDomainsByClient",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to configure if the source IP is used in the mapping of top level destination domains.",
          "DescriptionHTML": "<p>Used to configure if the source IP is used in the mapping of top level destination domains.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsDynamicAggregationEnabled",
          "NameEnvVar": "FELIX_FlowLogsDynamicAggregationEnabled",
          "NameYAML": "flowLogsDynamicAggregationEnabled",
          "NameGoAPI": "FlowLogsDynamicAggregationEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to enable/disable dynamically changing aggregation levels. Default is true.",
          "DescriptionHTML": "<p>Used to enable/disable dynamically changing aggregation levels. Default is true.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsEnableHostEndpoint",
          "NameEnvVar": "FELIX_FlowLogsEnableHostEndpoint",
          "NameYAML": "flowLogsEnableHostEndpoint",
          "NameGoAPI": "FlowLogsEnableHostEndpoint",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables Flow logs reporting for HostEndpoints.",
          "DescriptionHTML": "<p>Enables Flow logs reporting for HostEndpoints.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsEnableNetworkSets",
          "NameEnvVar": "FELIX_FlowLogsEnableNetworkSets",
          "NameYAML": "flowLogsEnableNetworkSets",
          "NameGoAPI": "FlowLogsEnableNetworkSets",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Enables Flow logs reporting for GlobalNetworkSets.",
          "DescriptionHTML": "<p>Enables Flow logs reporting for GlobalNetworkSets.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileAggregationKindForAllowed",
          "NameEnvVar": "FELIX_FlowLogsFileAggregationKindForAllowed",
          "NameYAML": "flowLogsFileAggregationKindForAllowed",
          "NameGoAPI": "FlowLogsFileAggregationKindForAllowed",
          "StringSchema": "Integer: [0,3]",
          "StringSchemaHTML": "Integer: [0,3]",
          "StringDefault": "2",
          "ParsedDefault": "2",
          "ParsedDefaultJSON": "2",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "One of: `0`, `1`, `2`.",
          "YAMLEnumValues": ["0", "1", "2"],
          "YAMLSchemaHTML": "One of: <code>0</code>, <code>1</code>, <code>2</code>.",
          "YAMLDefault": "2",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for flow log entries created for allowed connections. . Accepted values are 0, 1 and 2. 0 - No aggregation. 1 - Source port based aggregation. 2 - Pod prefix name based aggreagation.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for flow log entries created for allowed connections. . Accepted values are 0, 1 and 2. 0 - No aggregation. 1 - Source port based aggregation. 2 - Pod prefix name based aggreagation.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileAggregationKindForDenied",
          "NameEnvVar": "FELIX_FlowLogsFileAggregationKindForDenied",
          "NameYAML": "flowLogsFileAggregationKindForDenied",
          "NameGoAPI": "FlowLogsFileAggregationKindForDenied",
          "StringSchema": "Integer: [0,3]",
          "StringSchemaHTML": "Integer: [0,3]",
          "StringDefault": "1",
          "ParsedDefault": "1",
          "ParsedDefaultJSON": "1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "One of: `0`, `1`, `2`, `3`.",
          "YAMLEnumValues": ["0", "1", "2", "3"],
          "YAMLSchemaHTML": "One of: <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>.",
          "YAMLDefault": "1",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for flow log entries created for denied connections. . Accepted values are 0, 1 and 2. 0 - No aggregation. 1 - Source port based aggregation. 2 - Pod prefix name based aggregation. 3 - No destination ports based aggregation.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for flow log entries created for denied connections. . Accepted values are 0, 1 and 2. 0 - No aggregation. 1 - Source port based aggregation. 2 - Pod prefix name based aggregation. 3 - No destination ports based aggregation.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileDirectory",
          "NameEnvVar": "FELIX_FlowLogsFileDirectory",
          "NameYAML": "flowLogsFileDirectory",
          "NameGoAPI": "FlowLogsFileDirectory",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "/var/log/calico/flowlogs",
          "ParsedDefault": "/var/log/calico/flowlogs",
          "ParsedDefaultJSON": "\"/var/log/calico/flowlogs\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/flowlogs",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the directory where flow logs files are stored.",
          "DescriptionHTML": "<p>Sets the directory where flow logs files are stored.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileDomainsLimit",
          "NameEnvVar": "FELIX_FlowLogsFileDomainsLimit",
          "NameYAML": "flowLogsFileDomainsLimit",
          "NameGoAPI": "FlowLogsFileDomainsLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "5",
          "ParsedDefault": "5",
          "ParsedDefaultJSON": "5",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "5",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to configure the number of (destination) domains to include in the flow log. These are not included for workload or host endpoint destinations.",
          "DescriptionHTML": "<p>Used to configure the number of (destination) domains to include in the flow log. These are not included for workload or host endpoint destinations.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileEnabled",
          "NameEnvVar": "FELIX_FlowLogsFileEnabled",
          "NameYAML": "flowLogsFileEnabled",
          "NameGoAPI": "FlowLogsFileEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "When set to true, enables logging flow logs to a file. If false no flow logging to file will occur.",
          "DescriptionHTML": "<p>When set to true, enables logging flow logs to a file. If false no flow logging to file will occur.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileEnabledForAllowed",
          "NameEnvVar": "FELIX_FlowLogsFileEnabledForAllowed",
          "NameYAML": "flowLogsFileEnabledForAllowed",
          "NameGoAPI": "FlowLogsFileEnabledForAllowed",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to enable/disable flow logs entries created for allowed connections. Default is true. This parameter only takes effect when FlowLogsFileReporterEnabled is set to true.",
          "DescriptionHTML": "<p>Used to enable/disable flow logs entries created for allowed connections. Default is true. This parameter only takes effect when FlowLogsFileReporterEnabled is set to true.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileEnabledForDenied",
          "NameEnvVar": "FELIX_FlowLogsFileEnabledForDenied",
          "NameYAML": "flowLogsFileEnabledForDenied",
          "NameGoAPI": "FlowLogsFileEnabledForDenied",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to enable/disable flow logs entries created for denied flows. Default is true. This parameter only takes effect when FlowLogsFileReporterEnabled is set to true.",
          "DescriptionHTML": "<p>Used to enable/disable flow logs entries created for denied flows. Default is true. This parameter only takes effect when FlowLogsFileReporterEnabled is set to true.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileIncludeLabels",
          "NameEnvVar": "FELIX_FlowLogsFileIncludeLabels",
          "NameYAML": "flowLogsFileIncludeLabels",
          "NameGoAPI": "FlowLogsFileIncludeLabels",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to configure if endpoint labels are included in a Flow log entry written to file.",
          "DescriptionHTML": "<p>Used to configure if endpoint labels are included in a Flow log entry written to file.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileIncludePolicies",
          "NameEnvVar": "FELIX_FlowLogsFileIncludePolicies",
          "NameYAML": "flowLogsFileIncludePolicies",
          "NameGoAPI": "FlowLogsFileIncludePolicies",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to configure if policy information are included in a Flow log entry written to file.",
          "DescriptionHTML": "<p>Used to configure if policy information are included in a Flow log entry written to file.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileIncludeService",
          "NameEnvVar": "FELIX_FlowLogsFileIncludeService",
          "NameYAML": "flowLogsFileIncludeService",
          "NameGoAPI": "FlowLogsFileIncludeService",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to configure if the destination service is included in a Flow log entry written to file. The service information can only be included if the flow was explicitly determined to be directed at the service (e.g. when the pre-DNAT destination corresponds to the service ClusterIP and port).",
          "DescriptionHTML": "<p>Used to configure if the destination service is included in a Flow log entry written to file. The service information can only be included if the flow was explicitly determined to be directed at the service (e.g. when the pre-DNAT destination corresponds to the service ClusterIP and port).</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileMaxFileSizeMB",
          "NameEnvVar": "FELIX_FlowLogsFileMaxFileSizeMB",
          "NameYAML": "flowLogsFileMaxFileSizeMB",
          "NameGoAPI": "FlowLogsFileMaxFileSizeMB",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "100",
          "ParsedDefault": "100",
          "ParsedDefaultJSON": "100",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "100",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the max size in MB of flow logs files before rotation.",
          "DescriptionHTML": "<p>Sets the max size in MB of flow logs files before rotation.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileMaxFiles",
          "NameEnvVar": "FELIX_FlowLogsFileMaxFiles",
          "NameYAML": "flowLogsFileMaxFiles",
          "NameGoAPI": "FlowLogsFileMaxFiles",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "5",
          "ParsedDefault": "5",
          "ParsedDefaultJSON": "5",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "5",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the number of log files to keep.",
          "DescriptionHTML": "<p>Sets the number of log files to keep.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFileNatOutgoingPortLimit",
          "NameEnvVar": "FELIX_FlowLogsFileNatOutgoingPortLimit",
          "NameYAML": "flowLogsFileNatOutgoingPortLimit",
          "NameGoAPI": "FlowLogsFileNatOutgoingPortLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "3",
          "ParsedDefault": "3",
          "ParsedDefaultJSON": "3",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "3",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to specify the maximum number of distinct post SNAT ports that will appear in the flowLogs. Default value is 3.",
          "DescriptionHTML": "<p>Used to specify the maximum number of distinct post SNAT ports that will appear in the flowLogs. Default value is 3.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFilePerFlowProcessArgsLimit",
          "NameEnvVar": "FELIX_FlowLogsFilePerFlowProcessArgsLimit",
          "NameYAML": "flowLogsFilePerFlowProcessArgsLimit",
          "NameGoAPI": "FlowLogsFilePerFlowProcessArgsLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "5",
          "ParsedDefault": "5",
          "ParsedDefaultJSON": "5",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "5",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to specify the maximum number of distinct process args that will appear in the flowLogs. Default value is 5.",
          "DescriptionHTML": "<p>Used to specify the maximum number of distinct process args that will appear in the flowLogs. Default value is 5.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFilePerFlowProcessLimit",
          "NameEnvVar": "FELIX_FlowLogsFilePerFlowProcessLimit",
          "NameYAML": "flowLogsFilePerFlowProcessLimit",
          "NameGoAPI": "FlowLogsFilePerFlowProcessLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "2",
          "ParsedDefault": "2",
          "ParsedDefaultJSON": "2",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "2",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to specify the maximum number of flow log entries with distinct process information beyond which process information will be aggregated.",
          "DescriptionHTML": "<p>Used to specify the maximum number of flow log entries with distinct process information beyond which process information will be aggregated.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsFlushInterval",
          "NameEnvVar": "FELIX_FlowLogsFlushInterval",
          "NameYAML": "flowLogsFlushInterval",
          "NameGoAPI": "FlowLogsFlushInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "300",
          "ParsedDefault": "5m0s",
          "ParsedDefaultJSON": "300000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "5m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures the interval at which Felix exports flow logs.",
          "DescriptionHTML": "<p>Configures the interval at which Felix exports flow logs.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsMaxOriginalIPsIncluded",
          "NameEnvVar": "FELIX_FlowLogsMaxOriginalIPsIncluded",
          "NameYAML": "flowLogsMaxOriginalIPsIncluded",
          "NameGoAPI": "FlowLogsMaxOriginalIPsIncluded",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "50",
          "ParsedDefault": "50",
          "ParsedDefaultJSON": "50",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "50",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies the number of unique IP addresses (if relevant) that should be included in Flow logs.",
          "DescriptionHTML": "<p>Specifies the number of unique IP addresses (if relevant) that should be included in Flow logs.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Flow logs: file reports",
          "GroupWithSortPrefix": "40 Flow logs: file reports",
          "NameConfigFile": "FlowLogsPositionFilePath",
          "NameEnvVar": "FELIX_FlowLogsPositionFilePath",
          "NameYAML": "flowLogsPositionFilePath",
          "NameGoAPI": "FlowLogsPositionFilePath",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "/var/log/calico/flows.log.pos",
          "ParsedDefault": "/var/log/calico/flows.log.pos",
          "ParsedDefaultJSON": "\"/var/log/calico/flows.log.pos\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/flows.log.pos",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used specify the position of the external pipeline that reads flow logs. Default is /var/log/calico/flows.log.pos. This parameter only takes effect when FlowLogsDynamicAggregationEnabled is set to true.",
          "DescriptionHTML": "<p>Used specify the position of the external pipeline that reads flow logs. Default is /var/log/calico/flows.log.pos. This parameter only takes effect when FlowLogsDynamicAggregationEnabled is set to true.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "DNS logs / policy",
      "Fields": [
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSCacheEpoch",
          "NameEnvVar": "FELIX_DNSCacheEpoch",
          "NameYAML": "dnsCacheEpoch",
          "NameGoAPI": "DNSCacheEpoch",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "An arbitrary number that can be changed, at runtime, to tell Felix to discard all its learnt DNS information. .",
          "DescriptionHTML": "<p>An arbitrary number that can be changed, at runtime, to tell Felix to discard all its learnt DNS information. .</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSCacheFile",
          "NameEnvVar": "FELIX_DNSCacheFile",
          "NameYAML": "dnsCacheFile",
          "NameGoAPI": "DNSCacheFile",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "/var/run/calico/felix-dns-cache.txt",
          "ParsedDefault": "/var/run/calico/felix-dns-cache.txt",
          "ParsedDefaultJSON": "\"/var/run/calico/felix-dns-cache.txt\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/run/calico/felix-dns-cache.txt",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The name of the file that Felix uses to preserve learnt DNS information when restarting. .",
          "DescriptionHTML": "<p>The name of the file that Felix uses to preserve learnt DNS information when restarting. .</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSCacheSaveInterval",
          "NameEnvVar": "FELIX_DNSCacheSaveInterval",
          "NameYAML": "dnsCacheSaveInterval",
          "NameGoAPI": "DNSCacheSaveInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "60",
          "ParsedDefault": "1m0s",
          "ParsedDefaultJSON": "60000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "1m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The periodic interval at which Felix saves learnt DNS information to the cache file. .",
          "DescriptionHTML": "<p>The periodic interval at which Felix saves learnt DNS information to the cache file. .</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSExtraTTL",
          "NameEnvVar": "FELIX_DNSExtraTTL",
          "NameYAML": "dnsExtraTTL",
          "NameGoAPI": "DNSExtraTTL",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Extra time to keep IPs and alias names that are learnt from DNS, in addition to each name or IP's advertised TTL. .",
          "DescriptionHTML": "<p>Extra time to keep IPs and alias names that are learnt from DNS, in addition to each name or IP's advertised TTL. .</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFileAggregationKind",
          "NameEnvVar": "FELIX_DNSLogsFileAggregationKind",
          "NameYAML": "dnsLogsFileAggregationKind",
          "NameGoAPI": "DNSLogsFileAggregationKind",
          "StringSchema": "Integer: [0,1]",
          "StringSchemaHTML": "Integer: [0,1]",
          "StringDefault": "1",
          "ParsedDefault": "1",
          "ParsedDefaultJSON": "1",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "One of: `0`, `1`.",
          "YAMLEnumValues": ["0", "1"],
          "YAMLSchemaHTML": "One of: <code>0</code>, <code>1</code>.",
          "YAMLDefault": "1",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for DNS log entries. . Accepted values are 0 and 1. 0 - No aggregation. 1 - Aggregate over clients with the same name prefix.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for DNS log entries. . Accepted values are 0 and 1. 0 - No aggregation. 1 - Aggregate over clients with the same name prefix.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFileDirectory",
          "NameEnvVar": "FELIX_DNSLogsFileDirectory",
          "NameYAML": "dnsLogsFileDirectory",
          "NameGoAPI": "DNSLogsFileDirectory",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "/var/log/calico/dnslogs",
          "ParsedDefault": "/var/log/calico/dnslogs",
          "ParsedDefaultJSON": "\"/var/log/calico/dnslogs\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/dnslogs",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the directory where DNS log files are stored.",
          "DescriptionHTML": "<p>Sets the directory where DNS log files are stored.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFileEnabled",
          "NameEnvVar": "FELIX_DNSLogsFileEnabled",
          "NameYAML": "dnsLogsFileEnabled",
          "NameGoAPI": "DNSLogsFileEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls logging DNS logs to a file. If false no DNS logging to file will occur.",
          "DescriptionHTML": "<p>Controls logging DNS logs to a file. If false no DNS logging to file will occur.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFileIncludeLabels",
          "NameEnvVar": "FELIX_DNSLogsFileIncludeLabels",
          "NameYAML": "dnsLogsFileIncludeLabels",
          "NameGoAPI": "DNSLogsFileIncludeLabels",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to configure if endpoint labels are included in a DNS log entry written to file.",
          "DescriptionHTML": "<p>Used to configure if endpoint labels are included in a DNS log entry written to file.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFileMaxFileSizeMB",
          "NameEnvVar": "FELIX_DNSLogsFileMaxFileSizeMB",
          "NameYAML": "dnsLogsFileMaxFileSizeMB",
          "NameGoAPI": "DNSLogsFileMaxFileSizeMB",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "100",
          "ParsedDefault": "100",
          "ParsedDefaultJSON": "100",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "100",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the max size in MB of DNS log files before rotation.",
          "DescriptionHTML": "<p>Sets the max size in MB of DNS log files before rotation.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFileMaxFiles",
          "NameEnvVar": "FELIX_DNSLogsFileMaxFiles",
          "NameYAML": "dnsLogsFileMaxFiles",
          "NameGoAPI": "DNSLogsFileMaxFiles",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "5",
          "ParsedDefault": "5",
          "ParsedDefaultJSON": "5",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "5",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the number of DNS log files to keep.",
          "DescriptionHTML": "<p>Sets the number of DNS log files to keep.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFilePerNodeLimit",
          "NameEnvVar": "FELIX_DNSLogsFilePerNodeLimit",
          "NameYAML": "dnsLogsFilePerNodeLimit",
          "NameGoAPI": "DNSLogsFilePerNodeLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "0",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "0",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Limit on the number of DNS logs that can be emitted within each flush interval. When this limit has been reached, Felix counts the number of unloggable DNS responses within the flush interval, and emits a WARNING log with that count at the same time as it flushes the buffered DNS logs.",
          "DescriptionHTML": "<p>Limit on the number of DNS logs that can be emitted within each flush interval. When this limit has been reached, Felix counts the number of unloggable DNS responses within the flush interval, and emits a WARNING log with that count at the same time as it flushes the buffered DNS logs.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsFlushInterval",
          "NameEnvVar": "FELIX_DNSLogsFlushInterval",
          "NameYAML": "dnsLogsFlushInterval",
          "NameGoAPI": "DNSLogsFlushInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "300",
          "ParsedDefault": "5m0s",
          "ParsedDefaultJSON": "300000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "5m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures the interval at which Felix exports DNS logs.",
          "DescriptionHTML": "<p>Configures the interval at which Felix exports DNS logs.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSLogsLatency",
          "NameEnvVar": "FELIX_DNSLogsLatency",
          "NameYAML": "dnsLogsLatency",
          "NameGoAPI": "DNSLogsLatency",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Indicates to include measurements of DNS request/response latency in each DNS log.",
          "DescriptionHTML": "<p>Indicates to include measurements of DNS request/response latency in each DNS log.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSPacketsNfqueueID",
          "NameEnvVar": "FELIX_DNSPacketsNfqueueID",
          "NameYAML": "dnsPacketsNfqueueID",
          "NameGoAPI": "DNSPacketsNfqueueID",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "101",
          "ParsedDefault": "101",
          "ParsedDefaultJSON": "101",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "101",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The NFQUEUE ID to use for capturing DNS packets to ensure programming IPSets occurs before the response is released. Used when DNSPolicyMode is DelayDNSResponse.",
          "DescriptionHTML": "<p>The NFQUEUE ID to use for capturing DNS packets to ensure programming IPSets occurs before the response is released. Used when DNSPolicyMode is DelayDNSResponse.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSPacketsNfqueueMaxHoldDuration",
          "NameEnvVar": "FELIX_DNSPacketsNfqueueMaxHoldDuration",
          "NameYAML": "dnsPacketsNfqueueMaxHoldDuration",
          "NameGoAPI": "DNSPacketsNfqueueMaxHoldDuration",
          "StringSchema": "Milliseconds (floating point)",
          "StringSchemaHTML": "Milliseconds (floating point)",
          "StringDefault": "3000",
          "ParsedDefault": "3s",
          "ParsedDefaultJSON": "3000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "3s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The max length of time to hold on to a DNS response while waiting for the the dataplane to be programmed. Used when DNSPolicyMode is DelayDNSResponse.",
          "DescriptionHTML": "<p>The max length of time to hold on to a DNS response while waiting for the the dataplane to be programmed. Used when DNSPolicyMode is DelayDNSResponse.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSPacketsNfqueueSize",
          "NameEnvVar": "FELIX_DNSPacketsNfqueueSize",
          "NameYAML": "dnsPacketsNfqueueSize",
          "NameGoAPI": "DNSPacketsNfqueueSize",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "100",
          "ParsedDefault": "100",
          "ParsedDefaultJSON": "100",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "100",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The size of the NFQUEUE for captured DNS packets. This is the maximum number of DNS packets that may be queued awaiting programming in the dataplane. Used when DNSPolicyMode is DelayDNSResponse.",
          "DescriptionHTML": "<p>The size of the NFQUEUE for captured DNS packets. This is the maximum number of DNS packets that may be queued awaiting programming in the dataplane. Used when DNSPolicyMode is DelayDNSResponse.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSPolicyMode",
          "NameEnvVar": "FELIX_DNSPolicyMode",
          "NameYAML": "dnsPolicyMode",
          "NameGoAPI": "DNSPolicyMode",
          "StringSchema": "One of: `DelayDNSResponse`, `DelayDeniedPacket`, `NoDelay` (case insensitive)",
          "StringSchemaHTML": "One of: <code>DelayDNSResponse</code>, <code>DelayDeniedPacket</code>, <code>NoDelay</code> (case insensitive)",
          "StringDefault": "DelayDeniedPacket",
          "ParsedDefault": "DelayDeniedPacket",
          "ParsedDefaultJSON": "\"DelayDeniedPacket\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"DelayDNSResponse\"`, `\"DelayDeniedPacket\"`, `\"NoDelay\"`.",
          "YAMLEnumValues": ["DelayDNSResponse", "DelayDeniedPacket", "NoDelay"],
          "YAMLSchemaHTML": "One of: <code>\"DelayDNSResponse\"</code>, <code>\"DelayDeniedPacket\"</code>, <code>\"NoDelay\"</code>.",
          "YAMLDefault": "DelayDeniedPacket",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Specifies how DNS policy programming will be handled. DelayDeniedPacket - Felix delays any denied packet that traversed a policy that included egress domain matches, but did not match. The packet is released after a fixed time, or after the destination IP address was programmed. DelayDNSResponse - Felix delays any DNS response until related IPSets are programmed. This introduces some latency to all DNS packets (even when no IPSet programming is required), but it ensures policy hit statistics are accurate. This is the recommended setting when you are making use of staged policies or policy rule hit statistics. NoDelay - Felix does not introduce any delay to the packets. DNS rules may not have been programmed by the time the first packet traverses the policy rules. Client applications need to handle reconnection attempts if initial connection attempts fail. This may be problematic for some applications or for very low DNS TTLs.\n\nThis setting is ignored on Windows and \"NoDelay\" is always used.\n\nThis setting is ignored by eBPF and BPFDNSPolicyMode is used instead.",
          "DescriptionHTML": "<p>Specifies how DNS policy programming will be handled. DelayDeniedPacket - Felix delays any denied packet that traversed a policy that included egress domain matches, but did not match. The packet is released after a fixed time, or after the destination IP address was programmed. DelayDNSResponse - Felix delays any DNS response until related IPSets are programmed. This introduces some latency to all DNS packets (even when no IPSet programming is required), but it ensures policy hit statistics are accurate. This is the recommended setting when you are making use of staged policies or policy rule hit statistics. NoDelay - Felix does not introduce any delay to the packets. DNS rules may not have been programmed by the time the first packet traverses the policy rules. Client applications need to handle reconnection attempts if initial connection attempts fail. This may be problematic for some applications or for very low DNS TTLs.</p>\n<p>This setting is ignored on Windows and \"NoDelay\" is always used.</p>\n<p>This setting is ignored by eBPF and BPFDNSPolicyMode is used instead.</p>",
          "UserEditable": true,
          "GoType": "*v3.DNSPolicyMode",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSPolicyNfqueueID",
          "NameEnvVar": "FELIX_DNSPolicyNfqueueID",
          "NameYAML": "dnsPolicyNfqueueID",
          "NameGoAPI": "DNSPolicyNfqueueID",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "100",
          "ParsedDefault": "100",
          "ParsedDefaultJSON": "100",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "100",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The NFQUEUE ID to use for DNS Policy re-evaluation when the domains IP hasn't been programmed to ipsets yet. Used when DNSPolicyMode is DelayDeniedPacket.",
          "DescriptionHTML": "<p>The NFQUEUE ID to use for DNS Policy re-evaluation when the domains IP hasn't been programmed to ipsets yet. Used when DNSPolicyMode is DelayDeniedPacket.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSPolicyNfqueueSize",
          "NameEnvVar": "FELIX_DNSPolicyNfqueueSize",
          "NameYAML": "dnsPolicyNfqueueSize",
          "NameGoAPI": "DNSPolicyNfqueueSize",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "255",
          "ParsedDefault": "255",
          "ParsedDefaultJSON": "255",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "255",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "DNSPolicyNfqueueID is the size of the NFQUEUE for DNS policy re-evaluation. This is the maximum number of denied packets that may be queued up pending re-evaluation. Used when DNSPolicyMode is DelayDeniedPacket.",
          "DescriptionHTML": "<p>DNSPolicyNfqueueID is the size of the NFQUEUE for DNS policy re-evaluation. This is the maximum number of denied packets that may be queued up pending re-evaluation. Used when DNSPolicyMode is DelayDeniedPacket.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "DNS logs / policy",
          "GroupWithSortPrefix": "50 DNS logs / policy",
          "NameConfigFile": "DNSTrustedServers",
          "NameEnvVar": "FELIX_DNSTrustedServers",
          "NameYAML": "dnsTrustedServers",
          "NameGoAPI": "DNSTrustedServers",
          "StringSchema": "Comma-delimited list of DNS servers. Each entry can be: `<IP address>`, an `<IP address>:<port>` (IPv6 addresses must be wrapped in square brackets), or, a Kubernetes service name `k8s-service:(namespace/)service-name`.",
          "StringSchemaHTML": "Comma-delimited list of DNS servers. Each entry can be: <code>&lt;IP address&gt;</code>, an <code>&lt;IP address&gt;:&lt;port&gt;</code> (IPv6 addresses must be wrapped in square brackets), or, a Kubernetes service name <code>k8s-service:(namespace/)service-name</code>.",
          "StringDefault": "k8s-service:kube-dns",
          "ParsedDefault": "[]",
          "ParsedDefaultJSON": "[]",
          "ParsedType": "[]config.ServerPort",
          "YAMLType": "array",
          "YAMLSchema": "List of strings: `[\"<string>\", ...]`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "List of strings: <code>[\"&lt;string&gt;\", ...]</code>.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The DNS servers that Felix should trust. Each entry here must be `<ip>[:<port>]` - indicating an explicit DNS server IP - or `k8s-service:[<namespace>/]<name>[:port]` - indicating a Kubernetes DNS service. `<port>` defaults to the first service port, or 53 for an IP, and `<namespace>` to `kube-system`. An IPv6 address with a port must use the square brackets convention, for example `[fd00:83a6::12]:5353`.Note that Felix (calico-node) will need RBAC permission to read the details of each service specified by a `k8s-service:...` form. .",
          "DescriptionHTML": "<p>The DNS servers that Felix should trust. Each entry here must be <code>&lt;ip&gt;[:&lt;port&gt;]</code> - indicating an explicit DNS server IP - or <code>k8s-service:[&lt;namespace&gt;/]&lt;name&gt;[:port]</code> - indicating a Kubernetes DNS service. <code>&lt;port&gt;</code> defaults to the first service port, or 53 for an IP, and <code>&lt;namespace&gt;</code> to <code>kube-system</code>. An IPv6 address with a port must use the square brackets convention, for example <code>[fd00:83a6::12]:5353</code>.Note that Felix (calico-node) will need RBAC permission to read the details of each service specified by a <code>k8s-service:...</code> form. .</p>",
          "UserEditable": true,
          "GoType": "*[]string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "L7 logs",
      "Fields": [
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationDestinationInfo",
          "NameEnvVar": "FELIX_L7LogsFileAggregationDestinationInfo",
          "NameYAML": "l7LogsFileAggregationDestinationInfo",
          "NameGoAPI": "L7LogsFileAggregationDestinationInfo",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "IncludeL7DestinationInfo",
          "ParsedDefault": "IncludeL7DestinationInfo",
          "ParsedDefaultJSON": "\"IncludeL7DestinationInfo\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7DestinationInfo`, `IncludeL7DestinationInfo`.",
          "YAMLEnumValues": ["ExcludeL7DestinationInfo", "IncludeL7DestinationInfo"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7DestinationInfo</code>, <code>IncludeL7DestinationInfo</code>.",
          "YAMLDefault": "IncludeL7DestinationInfo",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for the destination metadata on L7 log entries. . Accepted values are IncludeL7DestinationInfo and ExcludeL7DestinationInfo. IncludeL7DestinationInfo - Include destination metadata in the logs. ExcludeL7DestinationInfo - Aggregate over all other fields ignoring the destination aggregated name, namespace, and type.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for the destination metadata on L7 log entries. . Accepted values are IncludeL7DestinationInfo and ExcludeL7DestinationInfo. IncludeL7DestinationInfo - Include destination metadata in the logs. ExcludeL7DestinationInfo - Aggregate over all other fields ignoring the destination aggregated name, namespace, and type.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationHTTPHeaderInfo",
          "NameEnvVar": "FELIX_L7LogsFileAggregationHTTPHeaderInfo",
          "NameYAML": "l7LogsFileAggregationHTTPHeaderInfo",
          "NameGoAPI": "L7LogsFileAggregationHTTPHeaderInfo",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "ExcludeL7HTTPHeaderInfo",
          "ParsedDefault": "ExcludeL7HTTPHeaderInfo",
          "ParsedDefaultJSON": "\"ExcludeL7HTTPHeaderInfo\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7HTTPHeaderInfo`, `IncludeL7HTTPHeaderInfo`.",
          "YAMLEnumValues": ["ExcludeL7HTTPHeaderInfo", "IncludeL7HTTPHeaderInfo"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7HTTPHeaderInfo</code>, <code>IncludeL7HTTPHeaderInfo</code>.",
          "YAMLDefault": "ExcludeL7HTTPHeaderInfo",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for HTTP header data on L7 log entries. . Accepted values are IncludeL7HTTPHeaderInfo and ExcludeL7HTTPHeaderInfo. IncludeL7HTTPHeaderInfo - Include HTTP header data in the logs. ExcludeL7HTTPHeaderInfo - Aggregate over all other fields ignoring the user agent and log type.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for HTTP header data on L7 log entries. . Accepted values are IncludeL7HTTPHeaderInfo and ExcludeL7HTTPHeaderInfo. IncludeL7HTTPHeaderInfo - Include HTTP header data in the logs. ExcludeL7HTTPHeaderInfo - Aggregate over all other fields ignoring the user agent and log type.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationHTTPMethod",
          "NameEnvVar": "FELIX_L7LogsFileAggregationHTTPMethod",
          "NameYAML": "l7LogsFileAggregationHTTPMethod",
          "NameGoAPI": "L7LogsFileAggregationHTTPMethod",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "IncludeL7HTTPMethod",
          "ParsedDefault": "IncludeL7HTTPMethod",
          "ParsedDefaultJSON": "\"IncludeL7HTTPMethod\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7HTTPMethod`, `IncludeL7HTTPMethod`.",
          "YAMLEnumValues": ["ExcludeL7HTTPMethod", "IncludeL7HTTPMethod"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7HTTPMethod</code>, <code>IncludeL7HTTPMethod</code>.",
          "YAMLDefault": "IncludeL7HTTPMethod",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for the HTTP request method on L7 log entries. . Accepted values are IncludeL7HTTPMethod and ExcludeL7HTTPMethod. IncludeL7HTTPMethod - Include HTTP method in the logs. ExcludeL7HTTPMethod - Aggregate over all other fields ignoring the HTTP method.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for the HTTP request method on L7 log entries. . Accepted values are IncludeL7HTTPMethod and ExcludeL7HTTPMethod. IncludeL7HTTPMethod - Include HTTP method in the logs. ExcludeL7HTTPMethod - Aggregate over all other fields ignoring the HTTP method.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationNumURLPath",
          "NameEnvVar": "FELIX_L7LogsFileAggregationNumURLPath",
          "NameYAML": "l7LogsFileAggregationNumURLPath",
          "NameGoAPI": "L7LogsFileAggregationNumURLPath",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "5",
          "ParsedDefault": "5",
          "ParsedDefaultJSON": "5",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "5",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the number of components in the url path to display. This allows for the url to be truncated in case parts of the path provide no value. Setting this value to negative will allow all parts of the path to be displayed. .",
          "DescriptionHTML": "<p>Used to choose the number of components in the url path to display. This allows for the url to be truncated in case parts of the path provide no value. Setting this value to negative will allow all parts of the path to be displayed. .</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationResponseCode",
          "NameEnvVar": "FELIX_L7LogsFileAggregationResponseCode",
          "NameYAML": "l7LogsFileAggregationResponseCode",
          "NameGoAPI": "L7LogsFileAggregationResponseCode",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "IncludeL7ResponseCode",
          "ParsedDefault": "IncludeL7ResponseCode",
          "ParsedDefaultJSON": "\"IncludeL7ResponseCode\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7ResponseCode`, `IncludeL7ResponseCode`.",
          "YAMLEnumValues": ["ExcludeL7ResponseCode", "IncludeL7ResponseCode"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7ResponseCode</code>, <code>IncludeL7ResponseCode</code>.",
          "YAMLDefault": "IncludeL7ResponseCode",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for the response code on L7 log entries. . Accepted values are IncludeL7ResponseCode and ExcludeL7ResponseCode. IncludeL7ResponseCode - Include the response code in the logs. ExcludeL7ResponseCode - Aggregate over all other fields ignoring the response code.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for the response code on L7 log entries. . Accepted values are IncludeL7ResponseCode and ExcludeL7ResponseCode. IncludeL7ResponseCode - Include the response code in the logs. ExcludeL7ResponseCode - Aggregate over all other fields ignoring the response code.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationServiceInfo",
          "NameEnvVar": "FELIX_L7LogsFileAggregationServiceInfo",
          "NameYAML": "l7LogsFileAggregationServiceInfo",
          "NameGoAPI": "L7LogsFileAggregationServiceInfo",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "IncludeL7ServiceInfo",
          "ParsedDefault": "IncludeL7ServiceInfo",
          "ParsedDefaultJSON": "\"IncludeL7ServiceInfo\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7ServiceInfo`, `IncludeL7ServiceInfo`.",
          "YAMLEnumValues": ["ExcludeL7ServiceInfo", "IncludeL7ServiceInfo"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7ServiceInfo</code>, <code>IncludeL7ServiceInfo</code>.",
          "YAMLDefault": "IncludeL7ServiceInfo",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for the service data on L7 log entries. . Accepted values are IncludeL7ServiceInfo and ExcludeL7ServiceInfo. IncludeL7ServiceInfo - Include service data in the logs. ExcludeL7ServiceInfo - Aggregate over all other fields ignoring the service name, namespace, and port.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for the service data on L7 log entries. . Accepted values are IncludeL7ServiceInfo and ExcludeL7ServiceInfo. IncludeL7ServiceInfo - Include service data in the logs. ExcludeL7ServiceInfo - Aggregate over all other fields ignoring the service name, namespace, and port.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationSourceInfo",
          "NameEnvVar": "FELIX_L7LogsFileAggregationSourceInfo",
          "NameYAML": "l7LogsFileAggregationSourceInfo",
          "NameGoAPI": "L7LogsFileAggregationSourceInfo",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "IncludeL7SourceInfoNoPort",
          "ParsedDefault": "IncludeL7SourceInfoNoPort",
          "ParsedDefaultJSON": "\"IncludeL7SourceInfoNoPort\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7SourceInfo`, `IncludeL7SourceInfo`, `IncludeL7SourceInfoNoPort`.",
          "YAMLEnumValues": ["ExcludeL7SourceInfo", "IncludeL7SourceInfo", "IncludeL7SourceInfoNoPort"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7SourceInfo</code>, <code>IncludeL7SourceInfo</code>, <code>IncludeL7SourceInfoNoPort</code>.",
          "YAMLDefault": "IncludeL7SourceInfoNoPort",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "L7LogsFileAggregationExcludeSourceInfo is used to choose the type of aggregation for the source metadata on L7 log entries. . Accepted values are IncludeL7SourceInfo, IncludeL7SourceInfoNoPort, and ExcludeL7SourceInfo. IncludeL7SourceInfo - Include source metadata in the logs. IncludeL7SourceInfoNoPort - Include source metadata in the logs excluding the source port. ExcludeL7SourceInfo - Aggregate over all other fields ignoring the source aggregated name, namespace, and type.",
          "DescriptionHTML": "<p>L7LogsFileAggregationExcludeSourceInfo is used to choose the type of aggregation for the source metadata on L7 log entries. . Accepted values are IncludeL7SourceInfo, IncludeL7SourceInfoNoPort, and ExcludeL7SourceInfo. IncludeL7SourceInfo - Include source metadata in the logs. IncludeL7SourceInfoNoPort - Include source metadata in the logs excluding the source port. ExcludeL7SourceInfo - Aggregate over all other fields ignoring the source aggregated name, namespace, and type.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationTrimURL",
          "NameEnvVar": "FELIX_L7LogsFileAggregationTrimURL",
          "NameYAML": "l7LogsFileAggregationTrimURL",
          "NameGoAPI": "L7LogsFileAggregationTrimURL",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "IncludeL7FullURL",
          "ParsedDefault": "IncludeL7FullURL",
          "ParsedDefaultJSON": "\"IncludeL7FullURL\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `ExcludeL7URL`, `IncludeL7FullURL`, `TrimURLQuery`, `TrimURLQueryAndPath`.",
          "YAMLEnumValues": ["ExcludeL7URL", "IncludeL7FullURL", "TrimURLQuery", "TrimURLQueryAndPath"],
          "YAMLSchemaHTML": "One of: <code>ExcludeL7URL</code>, <code>IncludeL7FullURL</code>, <code>TrimURLQuery</code>, <code>TrimURLQueryAndPath</code>.",
          "YAMLDefault": "IncludeL7FullURL",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to choose the type of aggregation for the url on L7 log entries. . Accepted values: IncludeL7FullURL - Include the full URL up to however many path components are allowed by L7LogsFileAggregationNumURLPath. TrimURLQuery - Aggregate over all other fields ignoring the query parameters on the URL. TrimURLQueryAndPath - Aggregate over all other fields and the base URL only. ExcludeL7URL - Aggregate over all other fields ignoring the URL entirely.",
          "DescriptionHTML": "<p>Used to choose the type of aggregation for the url on L7 log entries. . Accepted values: IncludeL7FullURL - Include the full URL up to however many path components are allowed by L7LogsFileAggregationNumURLPath. TrimURLQuery - Aggregate over all other fields ignoring the query parameters on the URL. TrimURLQueryAndPath - Aggregate over all other fields and the base URL only. ExcludeL7URL - Aggregate over all other fields ignoring the URL entirely.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileAggregationURLCharLimit",
          "NameEnvVar": "FELIX_L7LogsFileAggregationURLCharLimit",
          "NameYAML": "l7LogsFileAggregationURLCharLimit",
          "NameGoAPI": "L7LogsFileAggregationURLCharLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "250",
          "ParsedDefault": "250",
          "ParsedDefaultJSON": "250",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "250",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Limit on the length of the URL collected in L7 logs. When a URL length reaches this limit it is sliced off, and the sliced URL is sent to log storage.",
          "DescriptionHTML": "<p>Limit on the length of the URL collected in L7 logs. When a URL length reaches this limit it is sliced off, and the sliced URL is sent to log storage.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileDirectory",
          "NameEnvVar": "FELIX_L7LogsFileDirectory",
          "NameYAML": "l7LogsFileDirectory",
          "NameGoAPI": "L7LogsFileDirectory",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "/var/log/calico/l7logs",
          "ParsedDefault": "/var/log/calico/l7logs",
          "ParsedDefaultJSON": "\"/var/log/calico/l7logs\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/l7logs",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the directory where L7 log files are stored.",
          "DescriptionHTML": "<p>Sets the directory where L7 log files are stored.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileEnabled",
          "NameEnvVar": "FELIX_L7LogsFileEnabled",
          "NameYAML": "l7LogsFileEnabled",
          "NameGoAPI": "L7LogsFileEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls logging L7 logs to a file. If false no L7 logging to file will occur.",
          "DescriptionHTML": "<p>Controls logging L7 logs to a file. If false no L7 logging to file will occur.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileMaxFileSizeMB",
          "NameEnvVar": "FELIX_L7LogsFileMaxFileSizeMB",
          "NameYAML": "l7LogsFileMaxFileSizeMB",
          "NameGoAPI": "L7LogsFileMaxFileSizeMB",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "100",
          "ParsedDefault": "100",
          "ParsedDefaultJSON": "100",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "100",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the max size in MB of L7 log files before rotation.",
          "DescriptionHTML": "<p>Sets the max size in MB of L7 log files before rotation.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFileMaxFiles",
          "NameEnvVar": "FELIX_L7LogsFileMaxFiles",
          "NameYAML": "l7LogsFileMaxFiles",
          "NameGoAPI": "L7LogsFileMaxFiles",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "5",
          "ParsedDefault": "5",
          "ParsedDefaultJSON": "5",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "5",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets the number of L7 log files to keep.",
          "DescriptionHTML": "<p>Sets the number of L7 log files to keep.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFilePerNodeLimit",
          "NameEnvVar": "FELIX_L7LogsFilePerNodeLimit",
          "NameYAML": "l7LogsFilePerNodeLimit",
          "NameGoAPI": "L7LogsFilePerNodeLimit",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "1500",
          "ParsedDefault": "1500",
          "ParsedDefaultJSON": "1500",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "1500",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Limit on the number of L7 logs that can be emitted within each flush interval. When this limit has been reached, Felix counts the number of unloggable L7 responses within the flush interval, and emits a WARNING log with that count at the same time as it flushes the buffered L7 logs. A value of 0 means no limit.",
          "DescriptionHTML": "<p>Limit on the number of L7 logs that can be emitted within each flush interval. When this limit has been reached, Felix counts the number of unloggable L7 responses within the flush interval, and emits a WARNING log with that count at the same time as it flushes the buffered L7 logs. A value of 0 means no limit.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 logs",
          "GroupWithSortPrefix": "50 L7 logs",
          "NameConfigFile": "L7LogsFlushInterval",
          "NameEnvVar": "FELIX_L7LogsFlushInterval",
          "NameYAML": "l7LogsFlushInterval",
          "NameGoAPI": "L7LogsFlushInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "300",
          "ParsedDefault": "5m0s",
          "ParsedDefaultJSON": "300000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "5m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Configures the interval at which Felix exports L7 logs.",
          "DescriptionHTML": "<p>Configures the interval at which Felix exports L7 logs.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "AWS integration",
      "Fields": [
        {
          "Group": "AWS integration",
          "GroupWithSortPrefix": "60 AWS integration",
          "NameConfigFile": "AWSRequestTimeout",
          "NameEnvVar": "FELIX_AWSRequestTimeout",
          "NameYAML": "awsRequestTimeout",
          "NameGoAPI": "AWSRequestTimeout",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "30",
          "ParsedDefault": "30s",
          "ParsedDefaultJSON": "30000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "30s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The timeout on AWS API requests.",
          "DescriptionHTML": "<p>The timeout on AWS API requests.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "AWS integration",
          "GroupWithSortPrefix": "60 AWS integration",
          "NameConfigFile": "AWSSecondaryIPRoutingRulePriority",
          "NameEnvVar": "FELIX_AWSSecondaryIPRoutingRulePriority",
          "NameYAML": "awsSecondaryIPRoutingRulePriority",
          "NameGoAPI": "AWSSecondaryIPRoutingRulePriority",
          "StringSchema": "Integer: [0,4294967295]",
          "StringSchemaHTML": "Integer: [0,4294967295]",
          "StringDefault": "101",
          "ParsedDefault": "101",
          "ParsedDefaultJSON": "101",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [0,4294967295]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [0,4294967295]",
          "YAMLDefault": "101",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the priority that Felix will use for routing rules when programming them for AWS Secondary IP support.",
          "DescriptionHTML": "<p>Controls the priority that Felix will use for routing rules when programming them for AWS Secondary IP support.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "AWS integration",
          "GroupWithSortPrefix": "60 AWS integration",
          "NameConfigFile": "AWSSecondaryIPSupport",
          "NameEnvVar": "FELIX_AWSSecondaryIPSupport",
          "NameYAML": "awsSecondaryIPSupport",
          "NameGoAPI": "AWSSecondaryIPSupport",
          "StringSchema": "One of: `Disabled`, `EnabledENIPerWorkload`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>EnabledENIPerWorkload</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Disabled`, `Enabled`, `EnabledENIPerWorkload`.",
          "YAMLEnumValues": ["Disabled", "Enabled", "EnabledENIPerWorkload"],
          "YAMLSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code>, <code>EnabledENIPerWorkload</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will try to provision AWS secondary ENIs for workloads that have IPs from IP pools that are configured with an AWS subnet ID. If the field is set to \"EnabledENIPerWorkload\" then each workload with an AWS-backed IP will be assigned its own secondary ENI. If set to \"Enabled\" then each workload with an AWS-backed IP pool will be allocated a secondary IP address on a secondary ENI; this mode requires additional IP pools to be provisioned for the host to claim IPs for the primary IP of the secondary ENIs. Accepted value must be one of \"Enabled\", \"EnabledENIPerWorkload\" or \"Disabled\".",
          "DescriptionHTML": "<p>Controls whether Felix will try to provision AWS secondary ENIs for workloads that have IPs from IP pools that are configured with an AWS subnet ID. If the field is set to \"EnabledENIPerWorkload\" then each workload with an AWS-backed IP will be assigned its own secondary ENI. If set to \"Enabled\" then each workload with an AWS-backed IP pool will be allocated a secondary IP address on a secondary ENI; this mode requires additional IP pools to be provisioned for the host to claim IPs for the primary IP of the secondary ENIs. Accepted value must be one of \"Enabled\", \"EnabledENIPerWorkload\" or \"Disabled\".</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "AWS integration",
          "GroupWithSortPrefix": "60 AWS integration",
          "NameConfigFile": "AWSSrcDstCheck",
          "NameEnvVar": "FELIX_AWSSrcDstCheck",
          "NameYAML": "awsSrcDstCheck",
          "NameGoAPI": "AWSSrcDstCheck",
          "StringSchema": "One of: `Disable`, `DoNothing`, `Enable` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disable</code>, <code>DoNothing</code>, <code>Enable</code> (case insensitive)",
          "StringDefault": "DoNothing",
          "ParsedDefault": "DoNothing",
          "ParsedDefaultJSON": "\"DoNothing\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `\"Disable\"`, `\"DoNothing\"`, `\"Enable\"`.",
          "YAMLEnumValues": ["Disable", "DoNothing", "Enable"],
          "YAMLSchemaHTML": "One of: <code>\"Disable\"</code>, <code>\"DoNothing\"</code>, <code>\"Enable\"</code>.",
          "YAMLDefault": "DoNothing",
          "Required": true,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls whether Felix will try to change the \"source/dest check\" setting on the EC2 instance on which it is running. A value of \"Disable\" will try to disable the source/dest check. Disabling the check allows for sending workload traffic without encapsulation within the same AWS subnet.",
          "DescriptionHTML": "<p>Controls whether Felix will try to change the \"source/dest check\" setting on the EC2 instance on which it is running. A value of \"Disable\" will try to disable the source/dest check. Disabling the check allows for sending workload traffic without encapsulation within the same AWS subnet.</p>",
          "UserEditable": true,
          "GoType": "*v3.AWSSrcDstCheckOption",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Egress gateway",
      "Fields": [
        {
          "Group": "Egress gateway",
          "GroupWithSortPrefix": "70 Egress gateway",
          "NameConfigFile": "EgressGatewayPollFailureCount",
          "NameEnvVar": "FELIX_EgressGatewayPollFailureCount",
          "NameYAML": "egressGatewayPollFailureCount",
          "NameGoAPI": "EgressGatewayPollFailureCount",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "3",
          "ParsedDefault": "3",
          "ParsedDefaultJSON": "3",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "3",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The minimum number of poll failures before a remote Egress Gateway is considered to have failed.",
          "DescriptionHTML": "<p>The minimum number of poll failures before a remote Egress Gateway is considered to have failed.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Egress gateway",
          "GroupWithSortPrefix": "70 Egress gateway",
          "NameConfigFile": "EgressGatewayPollInterval",
          "NameEnvVar": "FELIX_EgressGatewayPollInterval",
          "NameYAML": "egressGatewayPollInterval",
          "NameGoAPI": "EgressGatewayPollInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "10",
          "ParsedDefault": "10s",
          "ParsedDefaultJSON": "10000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "10s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The interval at which Felix will poll remote egress gateways to check their health. Only Egress Gateways with a named \"health\" port will be polled in this way. Egress Gateways that fail the health check will be taken our of use as if they have been deleted.",
          "DescriptionHTML": "<p>The interval at which Felix will poll remote egress gateways to check their health. Only Egress Gateways with a named \"health\" port will be polled in this way. Egress Gateways that fail the health check will be taken our of use as if they have been deleted.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Egress gateway",
          "GroupWithSortPrefix": "70 Egress gateway",
          "NameConfigFile": "EgressIPRoutingRulePriority",
          "NameEnvVar": "FELIX_EgressIPRoutingRulePriority",
          "NameYAML": "egressIPRoutingRulePriority",
          "NameGoAPI": "EgressIPRoutingRulePriority",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "100",
          "ParsedDefault": "100",
          "ParsedDefaultJSON": "100",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "100",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the priority value to use for the egress IP routing rule.",
          "DescriptionHTML": "<p>Controls the priority value to use for the egress IP routing rule.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Egress gateway",
          "GroupWithSortPrefix": "70 Egress gateway",
          "NameConfigFile": "EgressIPSupport",
          "NameEnvVar": "FELIX_EgressIPSupport",
          "NameYAML": "egressIPSupport",
          "NameGoAPI": "EgressIPSupport",
          "StringSchema": "One of: `Disabled`, `EnabledPerNamespaceOrPerPod`, `EnabledPerNamespace` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>EnabledPerNamespaceOrPerPod</code>, <code>EnabledPerNamespace</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Disabled`, `EnabledPerNamespace`, `EnabledPerNamespaceOrPerPod`.",
          "YAMLEnumValues": ["Disabled", "EnabledPerNamespace", "EnabledPerNamespaceOrPerPod"],
          "YAMLSchemaHTML": "One of: <code>Disabled</code>, <code>EnabledPerNamespace</code>, <code>EnabledPerNamespaceOrPerPod</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Defines three different support modes for egress IP function. - Disabled: Egress IP function is disabled. - EnabledPerNamespace: Egress IP function is enabled and can be configured on a per-namespace basis; per-pod egress annotations are ignored. - EnabledPerNamespaceOrPerPod: Egress IP function is enabled and can be configured per-namespace or per-pod, with per-pod egress annotations overriding namespace annotations.",
          "DescriptionHTML": "<p>Defines three different support modes for egress IP function. - Disabled: Egress IP function is disabled. - EnabledPerNamespace: Egress IP function is enabled and can be configured on a per-namespace basis; per-pod egress annotations are ignored. - EnabledPerNamespaceOrPerPod: Egress IP function is enabled and can be configured per-namespace or per-pod, with per-pod egress annotations overriding namespace annotations.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Egress gateway",
          "GroupWithSortPrefix": "70 Egress gateway",
          "NameConfigFile": "EgressIPVXLANPort",
          "NameEnvVar": "FELIX_EgressIPVXLANPort",
          "NameYAML": "egressIPVXLANPort",
          "NameGoAPI": "EgressIPVXLANPort",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "4790",
          "ParsedDefault": "4790",
          "ParsedDefaultJSON": "4790",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "4790",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The port number of vxlan tunnel device for egress traffic.",
          "DescriptionHTML": "<p>The port number of vxlan tunnel device for egress traffic.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Egress gateway",
          "GroupWithSortPrefix": "70 Egress gateway",
          "NameConfigFile": "EgressIPVXLANVNI",
          "NameEnvVar": "FELIX_EgressIPVXLANVNI",
          "NameYAML": "egressIPVXLANVNI",
          "NameGoAPI": "EgressIPVXLANVNI",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "4097",
          "ParsedDefault": "4097",
          "ParsedDefaultJSON": "4097",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "4097",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The VNI ID of vxlan tunnel device for egress traffic.",
          "DescriptionHTML": "<p>The VNI ID of vxlan tunnel device for egress traffic.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "External network support",
      "Fields": [
        {
          "Group": "External network support",
          "GroupWithSortPrefix": "70 External network support",
          "NameConfigFile": "ExternalNetworkRoutingRulePriority",
          "NameEnvVar": "FELIX_ExternalNetworkRoutingRulePriority",
          "NameYAML": "externalNetworkRoutingRulePriority",
          "NameGoAPI": "ExternalNetworkRoutingRulePriority",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "102",
          "ParsedDefault": "102",
          "ParsedDefaultJSON": "102",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "102",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the priority value to use for the external network routing rule.",
          "DescriptionHTML": "<p>Controls the priority value to use for the external network routing rule.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "External network support",
          "GroupWithSortPrefix": "70 External network support",
          "NameConfigFile": "ExternalNetworkSupport",
          "NameEnvVar": "FELIX_ExternalNetworkSupport",
          "NameYAML": "externalNetworkSupport",
          "NameGoAPI": "ExternalNetworkSupport",
          "StringSchema": "One of: `Disabled`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Disabled`, `Enabled`.",
          "YAMLEnumValues": ["Disabled", "Enabled"],
          "YAMLSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Defines two different support modes for external network function. - Disabled: External network function is disabled. - Enabled: External network function is enabled.",
          "DescriptionHTML": "<p>Defines two different support modes for external network function. - Disabled: External network function is disabled. - Enabled: External network function is enabled.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Packet capture",
      "Fields": [
        {
          "Group": "Packet capture",
          "GroupWithSortPrefix": "80 Packet capture",
          "NameConfigFile": "CaptureDir",
          "NameEnvVar": "FELIX_CaptureDir",
          "NameYAML": "captureDir",
          "NameGoAPI": "CaptureDir",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "/var/log/calico/pcap",
          "ParsedDefault": "/var/log/calico/pcap",
          "ParsedDefaultJSON": "\"/var/log/calico/pcap\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/pcap",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls directory to store file capture.",
          "DescriptionHTML": "<p>Controls directory to store file capture.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Packet capture",
          "GroupWithSortPrefix": "80 Packet capture",
          "NameConfigFile": "CaptureMaxFiles",
          "NameEnvVar": "FELIX_CaptureMaxFiles",
          "NameYAML": "captureMaxFiles",
          "NameGoAPI": "CaptureMaxFiles",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "2",
          "ParsedDefault": "2",
          "ParsedDefaultJSON": "2",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "2",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls number of rotated capture file to keep.",
          "DescriptionHTML": "<p>Controls number of rotated capture file to keep.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Packet capture",
          "GroupWithSortPrefix": "80 Packet capture",
          "NameConfigFile": "CaptureMaxSizeBytes",
          "NameEnvVar": "FELIX_CaptureMaxSizeBytes",
          "NameYAML": "captureMaxSizeBytes",
          "NameGoAPI": "CaptureMaxSizeBytes",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "10000000",
          "ParsedDefault": "10000000",
          "ParsedDefaultJSON": "10000000",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "10000000",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the max size of a file capture.",
          "DescriptionHTML": "<p>Controls the max size of a file capture.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Packet capture",
          "GroupWithSortPrefix": "80 Packet capture",
          "NameConfigFile": "CaptureRotationSeconds",
          "NameEnvVar": "FELIX_CaptureRotationSeconds",
          "NameYAML": "captureRotationSeconds",
          "NameGoAPI": "CaptureRotationSeconds",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "3600",
          "ParsedDefault": "3600",
          "ParsedDefaultJSON": "3600",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "3600",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Controls the time rotation of a packet capture.",
          "DescriptionHTML": "<p>Controls the time rotation of a packet capture.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "L7 proxy",
      "Fields": [
        {
          "Group": "L7 proxy",
          "GroupWithSortPrefix": "90 L7 proxy",
          "NameConfigFile": "TPROXYMode",
          "NameEnvVar": "FELIX_TPROXYMode",
          "NameYAML": "tproxyMode",
          "NameGoAPI": "TPROXYMode",
          "StringSchema": "One of: `Disabled`, `EnabledAllServices`, `Enabled` (case insensitive)",
          "StringSchemaHTML": "One of: <code>Disabled</code>, <code>EnabledAllServices</code>, <code>Enabled</code> (case insensitive)",
          "StringDefault": "Disabled",
          "ParsedDefault": "Disabled",
          "ParsedDefaultJSON": "\"Disabled\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "One of: `Disabled`, `Enabled`, `EnabledAllServices`.",
          "YAMLEnumValues": ["Disabled", "Enabled", "EnabledAllServices"],
          "YAMLSchemaHTML": "One of: <code>Disabled</code>, <code>Enabled</code>, <code>EnabledAllServices</code>.",
          "YAMLDefault": "Disabled",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets whether traffic is directed through a transparent proxy for further processing or not and how is the proxying done.",
          "DescriptionHTML": "<p>Sets whether traffic is directed through a transparent proxy for further processing or not and how is the proxying done.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 proxy",
          "GroupWithSortPrefix": "90 L7 proxy",
          "NameConfigFile": "TPROXYPort",
          "NameEnvVar": "FELIX_TPROXYPort",
          "NameYAML": "tproxyPort",
          "NameGoAPI": "TPROXYPort",
          "StringSchema": "Integer",
          "StringSchemaHTML": "Integer",
          "StringDefault": "16001",
          "ParsedDefault": "16001",
          "ParsedDefaultJSON": "16001",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer",
          "YAMLDefault": "16001",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Sets to which port proxied traffic should be redirected.",
          "DescriptionHTML": "<p>Sets to which port proxied traffic should be redirected.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "L7 proxy",
          "GroupWithSortPrefix": "90 L7 proxy",
          "NameConfigFile": "TPROXYUpstreamConnMark",
          "NameEnvVar": "FELIX_TPROXYUpstreamConnMark",
          "NameYAML": "tproxyUpstreamConnMark",
          "NameGoAPI": "TPROXYUpstreamConnMark",
          "StringSchema": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: `0xffff0000`",
          "StringSchemaHTML": "32-bit bitmask (hex or deccimal allowed) with at least 2 bits set, example: <code>0xffff0000</code>",
          "StringDefault": "0x17",
          "ParsedDefault": "23",
          "ParsedDefaultJSON": "23",
          "ParsedType": "uint32",
          "YAMLType": "integer",
          "YAMLSchema": "Unsigned 32-bit integer.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Unsigned 32-bit integer.",
          "YAMLDefault": "0x17",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Tells Felix which mark is used by the proxy for its upstream connections so that Felix can program the dataplane correctly.",
          "DescriptionHTML": "<p>Tells Felix which mark is used by the proxy for its upstream connections so that Felix can program the dataplane correctly.</p>",
          "UserEditable": true,
          "GoType": "*uint32",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Debug/test-only (generally unsupported)",
      "Fields": [
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugBPFCgroupV2",
          "NameEnvVar": "FELIX_DebugBPFCgroupV2",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Controls the cgroup v2 path that we apply the connect-time load balancer to. Most distros\nare configured for cgroup v1, which prevents all but the root cgroup v2 from working so this is only useful\nfor development right now.",
          "DescriptionHTML": "<p>Controls the cgroup v2 path that we apply the connect-time load balancer to. Most distros\nare configured for cgroup v1, which prevents all but the root cgroup v2 from working so this is only useful\nfor development right now.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugBPFMapRepinEnabled",
          "NameEnvVar": "FELIX_DebugBPFMapRepinEnabled",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "LocalOnly",
          "Description": "Can be used to prevent Felix from repinning its BPF maps at startup. This is useful for\ntesting with multiple Felix instances running on one host.",
          "DescriptionHTML": "<p>Can be used to prevent Felix from repinning its BPF maps at startup. This is useful for\ntesting with multiple Felix instances running on one host.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugCPUProfilePath",
          "NameEnvVar": "FELIX_DebugCPUProfilePath",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "/tmp/felix-cpu-<timestamp>.pprof",
          "ParsedDefault": "/tmp/felix-cpu-<timestamp>.pprof",
          "ParsedDefaultJSON": "\"/tmp/felix-cpu-\\u003ctimestamp\\u003e.pprof\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugCloudWatchLogsFile",
          "NameEnvVar": "FELIX_DebugCloudWatchLogsFile",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugConsoleEnabled",
          "NameEnvVar": "FELIX_DebugConsoleEnabled",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugDNSDoNotWriteIPSets",
          "NameEnvVar": "FELIX_DebugDNSDoNotWriteIPSets",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugDNSResponseDelay",
          "NameEnvVar": "FELIX_DebugDNSResponseDelay",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Milliseconds (floating point)",
          "StringSchemaHTML": "Milliseconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugDisableLogDropping",
          "NameEnvVar": "FELIX_DebugDisableLogDropping",
          "NameYAML": "debugDisableLogDropping",
          "NameGoAPI": "DebugDisableLogDropping",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "false",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Disables the dropping of log messages when the log buffer is full. This can significantly impact performance if log write-out is a bottleneck.",
          "DescriptionHTML": "<p>Disables the dropping of log messages when the log buffer is full. This can significantly impact performance if log write-out is a bottleneck.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugHost",
          "NameEnvVar": "FELIX_DebugHost",
          "NameYAML": "debugHost",
          "NameGoAPI": "DebugHost",
          "StringSchema": "String matching regex `^[a-zA-Z0-9:._+-]{1,64}$`",
          "StringSchemaHTML": "String matching regex <code>^[a-zA-Z0-9:._+-]{1,64}$</code>",
          "StringDefault": "localhost",
          "ParsedDefault": "localhost",
          "ParsedDefaultJSON": "\"localhost\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "localhost",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The host IP or hostname to bind the debug port to. Only used if DebugPort is set.",
          "DescriptionHTML": "<p>The host IP or hostname to bind the debug port to. Only used if DebugPort is set.</p>",
          "UserEditable": true,
          "GoType": "*string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugMemoryProfilePath",
          "NameEnvVar": "FELIX_DebugMemoryProfilePath",
          "NameYAML": "debugMemoryProfilePath",
          "NameGoAPI": "DebugMemoryProfilePath",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "The path to write the memory profile to when triggered by signal.",
          "DescriptionHTML": "<p>The path to write the memory profile to when triggered by signal.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugPanicAfter",
          "NameEnvVar": "FELIX_DebugPanicAfter",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugPort",
          "NameEnvVar": "FELIX_DebugPort",
          "NameYAML": "debugPort",
          "NameGoAPI": "DebugPort",
          "StringSchema": "Integer: [0,65535]",
          "StringSchemaHTML": "Integer: [0,65535]",
          "StringDefault": "",
          "ParsedDefault": "0",
          "ParsedDefaultJSON": "0",
          "ParsedType": "int",
          "YAMLType": "integer",
          "YAMLSchema": "Integer: [0,65535]",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Integer: [0,65535]",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "If set, enables Felix's debug HTTP port, which allows memory and CPU profiles to be retrieved. The debug port is not secure, it should not be exposed to the internet.",
          "DescriptionHTML": "<p>If set, enables Felix's debug HTTP port, which allows memory and CPU profiles to be retrieved. The debug port is not secure, it should not be exposed to the internet.</p>",
          "UserEditable": true,
          "GoType": "*int",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateCalcGraphHangAfter",
          "NameEnvVar": "FELIX_DebugSimulateCalcGraphHangAfter",
          "NameYAML": "debugSimulateCalcGraphHangAfter",
          "NameGoAPI": "DebugSimulateCalcGraphHangAfter",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to simulate a hang in the calculation graph after the specified duration. This is useful in tests of the watchdog system only!",
          "DescriptionHTML": "<p>Used to simulate a hang in the calculation graph after the specified duration. This is useful in tests of the watchdog system only!</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateDataRace",
          "NameEnvVar": "FELIX_DebugSimulateDataRace",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateDataplaneApplyDelay",
          "NameEnvVar": "FELIX_DebugSimulateDataplaneApplyDelay",
          "NameYAML": "debugSimulateDataplaneApplyDelay",
          "NameGoAPI": "DebugSimulateDataplaneApplyDelay",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Adds an artificial delay to every dataplane operation. This is useful for simulating a heavily loaded system for test purposes only.",
          "DescriptionHTML": "<p>Adds an artificial delay to every dataplane operation. This is useful for simulating a heavily loaded system for test purposes only.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugSimulateDataplaneHangAfter",
          "NameEnvVar": "FELIX_DebugSimulateDataplaneHangAfter",
          "NameYAML": "debugSimulateDataplaneHangAfter",
          "NameGoAPI": "DebugSimulateDataplaneHangAfter",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "0",
          "ParsedDefault": "0s",
          "ParsedDefaultJSON": "0",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Used to simulate a hang in the dataplane after the specified duration. This is useful in tests of the watchdog system only!",
          "DescriptionHTML": "<p>Used to simulate a hang in the dataplane after the specified duration. This is useful in tests of the watchdog system only!</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugUseShortPollIntervals",
          "NameEnvVar": "FELIX_DebugUseShortPollIntervals",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "false",
          "ParsedDefault": "false",
          "ParsedDefaultJSON": "false",
          "ParsedType": "bool",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "DebugWindowsPktMonStartArgs",
          "NameEnvVar": "FELIX_DebugWindowsPktMonStartArgs",
          "NameYAML": "",
          "NameGoAPI": "",
          "StringSchema": "String",
          "StringSchemaHTML": "String",
          "StringDefault": "",
          "ParsedDefault": "",
          "ParsedDefaultJSON": "\"\"",
          "ParsedType": "string",
          "YAMLType": "",
          "YAMLSchema": "",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "",
          "YAMLDefault": "",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unsupported diagnostic setting, used when testing Felix.  Not exposed in `FelixConfiguration`.",
          "DescriptionHTML": "<p>Unsupported diagnostic setting, used when testing Felix.  Not exposed in <code>FelixConfiguration</code>.</p>",
          "UserEditable": true,
          "GoType": "",
          "OpenSourceOnly": false
        },
        {
          "Group": "Debug/test-only (generally unsupported)",
          "GroupWithSortPrefix": "97 Debug/test-only (generally unsupported)",
          "NameConfigFile": "StatsDumpFilePath",
          "NameEnvVar": "FELIX_StatsDumpFilePath",
          "NameYAML": "statsDumpFilePath",
          "NameGoAPI": "StatsDumpFilePath",
          "StringSchema": "Path to file",
          "StringSchemaHTML": "Path to file",
          "StringDefault": "/var/log/calico/stats/dump",
          "ParsedDefault": "/var/log/calico/stats/dump",
          "ParsedDefaultJSON": "\"/var/log/calico/stats/dump\"",
          "ParsedType": "string",
          "YAMLType": "string",
          "YAMLSchema": "String.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "String.",
          "YAMLDefault": "/var/log/calico/stats/dump",
          "Required": false,
          "OnParseFailure": "Exit",
          "AllowedConfigSources": "All",
          "Description": "The path to write a diagnostic flow logs statistics dump to when triggered by signal.",
          "DescriptionHTML": "<p>The path to write a diagnostic flow logs statistics dump to when triggered by signal.</p>",
          "UserEditable": true,
          "GoType": "string",
          "OpenSourceOnly": false
        }
      ]
    },
    {
      "Name": "Usage reporting",
      "Fields": [
        {
          "Group": "Usage reporting",
          "GroupWithSortPrefix": "99 Usage reporting",
          "NameConfigFile": "UsageReportingEnabled",
          "NameEnvVar": "FELIX_UsageReportingEnabled",
          "NameYAML": "usageReportingEnabled",
          "NameGoAPI": "UsageReportingEnabled",
          "StringSchema": "Boolean: `true`, `1`, `yes`, `y`, `t` accepted as True; `false`, `0`, `no`, `n`, `f` accepted (case insensitively) as False.",
          "StringSchemaHTML": "Boolean: <code>true</code>, <code>1</code>, <code>yes</code>, <code>y</code>, <code>t</code> accepted as True; <code>false</code>, <code>0</code>, <code>no</code>, <code>n</code>, <code>f</code> accepted (case insensitively) as False.",
          "StringDefault": "true",
          "ParsedDefault": "true",
          "ParsedDefaultJSON": "true",
          "ParsedType": "bool",
          "YAMLType": "boolean",
          "YAMLSchema": "Boolean.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Boolean.",
          "YAMLDefault": "true",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unused in Calico Enterprise, usage reporting is permanently disabled.",
          "DescriptionHTML": "<p>Unused in Calico Enterprise, usage reporting is permanently disabled.</p>",
          "UserEditable": true,
          "GoType": "*bool",
          "OpenSourceOnly": true
        },
        {
          "Group": "Usage reporting",
          "GroupWithSortPrefix": "99 Usage reporting",
          "NameConfigFile": "UsageReportingInitialDelaySecs",
          "NameEnvVar": "FELIX_UsageReportingInitialDelaySecs",
          "NameYAML": "usageReportingInitialDelay",
          "NameGoAPI": "UsageReportingInitialDelay",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "300",
          "ParsedDefault": "5m0s",
          "ParsedDefaultJSON": "300000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "5m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unused in Calico Enterprise, usage reporting is permanently disabled.",
          "DescriptionHTML": "<p>Unused in Calico Enterprise, usage reporting is permanently disabled.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": true
        },
        {
          "Group": "Usage reporting",
          "GroupWithSortPrefix": "99 Usage reporting",
          "NameConfigFile": "UsageReportingIntervalSecs",
          "NameEnvVar": "FELIX_UsageReportingIntervalSecs",
          "NameYAML": "usageReportingInterval",
          "NameGoAPI": "UsageReportingInterval",
          "StringSchema": "Seconds (floating point)",
          "StringSchemaHTML": "Seconds (floating point)",
          "StringDefault": "86400",
          "ParsedDefault": "24h0m0s",
          "ParsedDefaultJSON": "86400000000000",
          "ParsedType": "time.Duration",
          "YAMLType": "string",
          "YAMLSchema": "Duration string, for example `1m30s123ms` or `1h5m`.",
          "YAMLEnumValues": null,
          "YAMLSchemaHTML": "Duration string, for example <code>1m30s123ms</code> or <code>1h5m</code>.",
          "YAMLDefault": "24h0m0s",
          "Required": false,
          "OnParseFailure": "ReplaceWithDefault",
          "AllowedConfigSources": "All",
          "Description": "Unused in Calico Enterprise, usage reporting is permanently disabled.",
          "DescriptionHTML": "<p>Unused in Calico Enterprise, usage reporting is permanently disabled.</p>",
          "UserEditable": true,
          "GoType": "*v1.Duration",
          "OpenSourceOnly": true
        }
      ]
    }
  ]
}
