# Tier containing policies to allow access to Calico Enterprise.
apiVersion: projectcalico.org/v3
kind: Tier
metadata:
  name: allow-tigera
  labels:
    projectcalico.org/system-tier: "true"
spec:
  order: 100

---

# Allow the Kubernetes API Server access to Calico Enterprise API Server.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.cnx-apiserver-access
  namespace: tigera-system
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-apiserver'
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      # This policy allows Calico Enterprise API Server access from anywhere: replace it with
      # the addresses of your Kubernetes API Servers if those are static.
      nets: ["0.0.0.0/0"]
    destination:
      # The ports Calico Enterprise API Server and Calico Enterprise Query Server are configured to listen on.
      ports: [443, 5443, 8080, 10443]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule in this policy allows tigera api-server to communicate with kubernetes api server.
      namespaceSelector: projectcalico.org/name == 'default'
      selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
      # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
      ports: [443, 6443, 12388]
  # Pass to subsequent tiers for further enforcement
  - action: Pass

---

# This manifest creates a network policy to allow traffic to Alertmanager
# (TCP port 9093).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.calico-node-alertmanager
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
  types:
    - Ingress
    - Egress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports: [9093]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  # This rule allows all kind of egress traffic from AlertManager.
  # recommended to customize egress flow, based on configuration.
  - action: Allow
    protocol: TCP
---

# This manifest creates a network policy to allow traffic between
# Alertmanagers for HA configuration (TCP port 6783).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.calico-node-alertmanager-mesh
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
  types:
    - Ingress
    - Egress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
      ports: [9094]
  - action: Allow
    protocol: UDP
    destination:
      selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
  egress:
  - action: Allow
    protocol: TCP
    destination:
      selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
      ports: [9094]
  - action: Allow
    protocol: UDP
    destination:
      selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
      ports: [9094]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
---

# This manifest creates a network policy to allow traffic to access the
# Prometheus (TCP port 9095).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.prometheus
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: (app == 'prometheus' && prometheus == 'calico-node-prometheus') || (app.kubernetes.io/name == 'prometheus' && prometheus == 'calico-node-prometheus')
  types:
    - Ingress
    - Egress
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports: [9095]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule in this policy allows prometheus to communicate with kubernetes api server.
      namespaceSelector: projectcalico.org/name == 'default'
      selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
      # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
      ports: [443, 6443, 12388]
  - action: Allow
    protocol: TCP
    destination:
      ports: [9081]
  - action: Allow
    protocol: TCP
    destination:
      # Egress access for BGP metrics
      ports: [9900]
  - action: Allow
    protocol: TCP
    destination:
      # Egress access to alertmanager
      selector: (app == 'alertmanager' && alertmanager == 'calico-node-alertmanager') || (app.kubernetes.io/name == 'alertmanager' && alertmanager == 'calico-node-alertmanager')
      ports: [9093]
---

# This manifest creates a network policy to allow traffic to access through tigera-prometheus-api.
# Prometheus (TCP port 9095).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.tigera-prometheus-api
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-prometheus-api'
  types:
    - Ingress
    - Egress
  ingress:
    # for incoming connections from the kube-apiserver
  - action: Allow
    protocol: TCP
    destination:
      ports: [9095]
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  - action: Allow
    # Egress access for tigera-prometheus-service
    # to access the prometheus instance
    protocol: TCP
    destination:
      selector: prometheus == "calico-node-prometheus"
      ports: [9095]
---

# This manifest creates a network policy to allow the prometheus-operator
# to access the kube-apiserver
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.prometheus-operator
  namespace: tigera-prometheus
spec:
  order: 1
  tier: allow-tigera
  selector: operator == 'prometheus'
  types:
    - Egress
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows to communicate with openshift-dns.
        namespaceSelector: projectcalico.org/name == "openshift-dns"
        selector: dns.operator.openshift.io/daemonset-dns == "default"
        ports: [5353]
{%- else %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows communicate with kube-dns.
        namespaceSelector: projectcalico.org/name == 'kube-system'
        selector: k8s-app == 'kube-dns'
        ports: [53]
{%- endif %}
    - action: Allow
      protocol: TCP
      destination:
        # This egress rule in this policy allows prometheus-operator to communicate with kubernetes api server.
        namespaceSelector: projectcalico.org/name == 'default'
        selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
        # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
        # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
        ports: [443, 6443, 12388]

---

# This policy ensures Fluentd POD is marked as protected by compliance
# (network access report).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.allow-fluentd-node
  namespace: tigera-fluentd
spec:
  tier: allow-tigera
  order: 1
  selector: k8s-app == "fluentd-node"
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      selector: (app == 'prometheus' && prometheus == 'calico-node-prometheus') || (app.kubernetes.io/name == 'prometheus' && prometheus == 'calico-node-prometheus')
      namespaceSelector: projectcalico.org/name == "tigera-prometheus"
    destination:
      ports:
      - '9081'
  egress:
  - action: Deny
    protocol: TCP
    source: {}
    destination:
      selector: k8s-app == "tigera-guardian"
      namespaceSelector: projectcalico.org/name == "tigera-guardian"
      notPorts: [8080]
  - action: Allow
---

# Creates a network policy to allow traffic through Guardian (TCP port 8080) to the management plane.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.guardian-access
  namespace: tigera-guardian
spec:
  selector: k8s-app == 'tigera-guardian'
  order: 1
  tier: allow-tigera
  types:
    - Ingress
    - Egress
  ingress:
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-fluentd'
        selector: k8s-app == 'fluentd-node'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-benchmarker'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-reporter'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-snapshotter'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-compliance'
        selector: k8s-app == 'compliance-controller'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-intrusion-detection'
        selector: k8s-app == 'intrusion-detection-controller'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      source:
        namespaceSelector: projectcalico.org/name == 'tigera-intrusion-detection'
        selector: job-name == 'intrusion-detection-es-job-installer'
    - action: Allow
      destination:
        ports:
          - 8080
      protocol: TCP
      # DPI and honeypod-controller pods are on hostnetwork, it's hard to create specific network policies for it.
      # If the node CIDRs are known they can be added to this rule to restrict access to just the nodes in the cluster.
  egress:
    - action: Allow
      protocol: TCP
      destination:
        # This rule allows to communicate with tigera-packetcapture.
        namespaceSelector: projectcalico.org/name == 'tigera-packetcapture'
        selector: k8s-app == 'tigera-packetcapture'
        ports: [8444]
{%- if include.containerOrchestrationPlatform == "openshift" %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows to communicate with openshift-dns.
        namespaceSelector: projectcalico.org/name == "openshift-dns"
        selector: dns.operator.openshift.io/daemonset-dns == "default"
        ports: [5353]
{%- else %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows communicate with kube-dns.
        namespaceSelector: projectcalico.org/name == "kube-system"
        selector: k8s-app == "kube-dns"
        ports: [53]
{%- endif %}
    - action: Allow
      protocol: TCP
      destination:
        # This egress rule in this policy allows tigera api-server to communicate with kubernetes api server.
        namespaceSelector: projectcalico.org/name == 'default'
        selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
        # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
        # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
        ports: [443, 6443, 12388]
    - action: Allow
      protocol: TCP
      destination:
        # This rule allows guardian to communicate with tigera-prometheus.
        selector: prometheus == "calico-node-prometheus"
        namespaceSelector: projectcalico.org/name == 'tigera-prometheus'
        ports: [ 9095 ]
    # Pass to subsequent tiers for further enforcement
    - action: Pass

---

# Allow compliance components to communicate with the apiserver, DNS and elasticsearch (via guardian).
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.compliance-access
  namespace: tigera-compliance
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'compliance-benchmarker' || k8s-app == 'compliance-controller' || k8s-app == 'compliance-snapshotter' || k8s-app == 'compliance-reporter'
  types:
  - Egress
  egress:
  - action: Allow
    protocol: TCP
    destination:
      # This egress rule in this policy allows compliance to communicate with kubernetes api server.
      namespaceSelector: projectcalico.org/name == 'default'
      selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
      # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
      ports: [443, 6443, 12388]
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == 'openshift-dns'
      selector: dns.operator.openshift.io/daemonset-dns == 'default'
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == 'kube-system'
      selector: k8s-app == 'kube-dns'
      ports: [53]
{%- endif %}
  # Allow access to Elasticsearch. In managed clusters, this is via guardian.
  - action: Allow
    protocol: TCP
    destination:
      selector: k8s-app == 'tigera-guardian'
      namespaceSelector: projectcalico.org/name == 'tigera-guardian'
      ports: [8080]

---

# Allow kube-controllers to communicate with API server, DNS and elasticsearch.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.kube-controller-access
  namespace: calico-system
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'calico-kube-controllers'
  types:
    - Egress
  egress:
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with openshift-dns.
      namespaceSelector: projectcalico.org/name == "openshift-dns"
      selector: dns.operator.openshift.io/daemonset-dns == "default"
      ports: [5353]
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      # This rule allows to communicate with kube-dns.
      namespaceSelector: projectcalico.org/name == "kube-system"
      selector: k8s-app == "kube-dns"
      ports: [53]
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
      # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
      ports: [443, 6443, 12388]
  # Allow access to Elasticsearch. In managed clusters, this is via guardian.
  - action: Allow
    protocol: TCP
    destination:
      selector: k8s-app == 'tigera-guardian'
      namespaceSelector: projectcalico.org/name == 'tigera-guardian'
      ports: [8080]

---

apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.intrusion-detection-controller
  namespace: tigera-intrusion-detection
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'intrusion-detection-controller'
  types:
    - Ingress
    - Egress
  ingress:
    # Intrusion detection controller doesn't listen on any external ports
    - action: Deny
  egress:
    # Block any link local IPs, e.g. cloud metadata, which are often targets
    # of server-side request forgery (SSRF) attacks
    - action: Deny
      protocol: TCP
      destination:
        nets:
          - "169.254.0.0/16"
    - action: Deny
      protocol: TCP
      destination:
        nets:
          - "fe80::/10"
  {%- if include.containerOrchestrationPlatform == "openshift" %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows to communicate with openshift-dns.
        namespaceSelector: projectcalico.org/name == "openshift-dns"
        selector: dns.operator.openshift.io/daemonset-dns == "default"
        ports: [5353]
  {%- else %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows to communicate with kube-dns.
        namespaceSelector: projectcalico.org/name == "kube-system"
        selector: k8s-app == "kube-dns"
        ports: [53]
  {%- endif %}
    - action: Allow
      protocol: TCP
      destination:
        selector: k8s-app == "tigera-guardian"
        namespaceSelector: projectcalico.org/name == "tigera-guardian"
        ports: [8080]
    - action: Allow
      protocol: TCP
      destination:
        # This egress rule in this policy allows tigera-intrusion-detection to communicate with kubernetes api server.
        namespaceSelector: projectcalico.org/name == 'default'
        selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
        # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
        # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
        ports: [443, 6443, 12388]
    # Pass to subsequent tiers for further enforcement
    - action: Pass

---

# Allow internal communication to packetcapture-server from Manager.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.tigera-packetcapture
  namespace: tigera-packetcapture
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-packetcapture'
  types:
    - Ingress
    - Egress
  ingress:
    - action: Allow
      protocol: TCP
      source:
        selector: k8s-app == 'tigera-guardian'
        namespaceSelector: name == 'tigera-guardian'
      destination:
        ports: [8444]
  egress:
    - action: Allow
      protocol: TCP
      destination:
        # This egress rule in this policy allows packetcapture to communicate with kubernetes api server.
        namespaceSelector: projectcalico.org/name == 'default'
        selector: (provider == 'kubernetes' && component == 'apiserver' && endpoints.projectcalico.org/serviceName == 'kubernetes')
        # By default, kubernetes api server listens on [12388, 6443, 443]. If Api server is customized to listen
        # on different port, Include the port number below. DockerEE uses port 12388 for kubernetes apiserver service.
        ports: [443, 6443, 12388]
{%- if include.containerOrchestrationPlatform == "openshift" %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows to communicate with openshift-dns.
        namespaceSelector: projectcalico.org/name == "openshift-dns"
        selector: dns.operator.openshift.io/daemonset-dns == "default"
        ports: [5353]
{%- else %}
    - action: Allow
      protocol: UDP
      destination:
        # This rule allows communicate with kube-dns.
        namespaceSelector: projectcalico.org/name == 'kube-system'
        selector: k8s-app == 'kube-dns'
        ports: [53]
{%- endif %}

---

# Allow internal communication from tigera-dpi to apiserver, coredns and guardian.
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: allow-tigera.tigera-dpi
  namespace: tigera-dpi
spec:
  order: 1
  tier: allow-tigera
  selector: k8s-app == 'tigera-dpi'
  types:
  - Egress
  egress:
  - action: Allow
    protocol: TCP
    destination:
      services:
        namespace: default
        name: kubernetes
{%- if include.containerOrchestrationPlatform == "openshift" %}
  - action: Allow
    protocol: UDP
    destination:
      services:
        namespace: default
        name: openshift-dns
{%- else %}
  - action: Allow
    protocol: UDP
    destination:
      services:
        namespace: kube-system
        name: kube-dns
{%- endif %}
  - action: Allow
    protocol: TCP
    destination:
      services:
        namespace: tigera-guardian
        name: tigera-guardian

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-intrusion-detection
spec:
  tier: allow-tigera
  selector: all()
  types:
    - Ingress
    - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-compliance
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-prometheus
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress

---

kind: NetworkPolicy
apiVersion: projectcalico.org/v3
metadata:
  name: allow-tigera.default-deny
  namespace: tigera-guardian
spec:
  tier: allow-tigera
  selector: all()
  types:
  - Ingress
  - Egress
