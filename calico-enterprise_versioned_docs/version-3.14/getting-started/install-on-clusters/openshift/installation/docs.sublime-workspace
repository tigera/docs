{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "/Users/bmckercher/Tigera/docs/calico-enterprise/compliance/compliance-reports-cis.mdx",
			"settings":
			{
				"buffer_size": 10253,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/Users/bmckercher/Tigera/docs/sidebars-calico-enterprise.js",
			"settings":
			{
				"buffer_size": 33495,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdCIAAAAAAACDIgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "---\ndescription: Enable policy recommendations for namespaces to improve your security posture.\nhide_table_of_contents: true\n---\n\n# Policy recommendations\n\nimport DocCardList from '@theme/DocCardList';\nimport { useCurrentSidebarCategory } from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items} />\n",
			"file": "/Users/bmckercher/Tigera/docs/calico-enterprise/network-policy/recommendations/index.mdx",
			"file_size": 331,
			"file_write_time": 133233104785610427,
			"settings":
			{
				"buffer_size": 331,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/bmckercher/Tigera/docs",
		"/Users/bmckercher/Tigera/docs/calico-enterprise",
		"/Users/bmckercher/Tigera/docs/calico-enterprise/network-policy",
		"/Users/bmckercher/Tigera/docs/docs"
	],
	"file_history":
	[
		"/Users/bmckercher/Tigera/docs/calico_versions.json",
		"/Users/bmckercher/Tigera/docs/sidebars-calico-cloud.js",
		"/Users/bmckercher/Desktop/cc-sidebars-redo.js",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/policy.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/networking.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/tutorials.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/get-help.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/reference.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/operations.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/compliance.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/threat.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/non-cluster-hosts.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/workload-access.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/image-assurance.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/get-started.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/about.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/release-notes.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/multicluster.yml",
		"/Users/bmckercher/Tigera/calico-cloud/_data/navbars/external-access.yml",
		"/Users/bmckercher/Desktop/backup-cc.js",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/maintenance.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/getting-started.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/release-notes.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/about.yml",
		"/Users/bmckercher/Tigera/docs/sidebars-calico-enterprise.js",
		"/Users/bmckercher/Desktop/sidebars-calico-cloud-dec8.js",
		"/Users/bmckercher/Tigera/docs/calico-enterprise_versioned_sidebars/version-v3.14-sidebars.json",
		"/Users/bmckercher/Tigera/docs/sidebars.js",
		"/Users/bmckercher/Tigera/docs/calico-enterprise_versioned_docs/version-v3.14/_includes/content/_cli-config-datastore.mdx",
		"/Users/bmckercher/Tigera/calico-private/calico/security/protect-hosts.md",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/support_matrix.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_config.yml",
		"/Users/bmckercher/Desktop/support_matrix 3.yml",
		"/Users/bmckercher/Desktop/support_matrix.yml",
		"/Users/bmckercher/Tigera/calico/calico/_data/navbars/about.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/networking.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/visibility.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/get-started-cem.md",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/manager-ui.md",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/elastic/kube-audit.md",
		"/Users/bmckercher/Tigera/calico-cloud/release-notes/index.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/tutorials/service-graph.md",
		"/Users/bmckercher/Tigera/calico-cloud/image-assurance/scan-image-registries.md",
		"/Users/bmckercher/Tigera/calico-cloud/image-assurance/install-the-admission-controller.md",
		"/Users/bmckercher/Tigera/calico-private/calico/_includes/charts/tigera-operator/crds/eck/01-crd-eck-elasticsearch.yaml",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/elastic/flow/datatypes.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/globalnetworkpolicy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/reference.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/getting-started/kubernetes/gke.md",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/troubleshoot.md",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/visualize-traffic.md",
		"/Users/bmckercher/Desktop/Calico Enterprise components update for 3.9.svg",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/calico-enterprise",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/node.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/public-cloud/aws.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/architecture/overview.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/policy-troubleshooting.md",
		"/Users/bmckercher/Tigera/calico-private/calico/getting-started/windows-calico/kubernetes/standard.md",
		"/Users/bmckercher/Tigera/calico-private/calico/threat/web-application-firewall.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/policy-best-practices.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/comms/packetcapture-tls.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/comms/log-storage-tls.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/felixconfig.md",
		"/Users/bmckercher/Tigera/calico-private/calico/compliance/egress-gateways.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/felix/configuration.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/comms/compliance-tls.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/tutorials/calico-policy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/comms/apiserver-tls.md",
		"/Users/bmckercher/Tigera/calico-private/calico/about/about-calico-enterprise.md",
		"/Users/bmckercher/Tigera/calico-private/calico/maintenance/ebpf/use-cases-ebpf.md",
		"/Users/bmckercher/Tigera/calico-private/calico/maintenance/troubleshoot/troubleshooting.md",
		"/Users/bmckercher/Tigera/calico-private/calico/getting-started/windows-calico/troubleshoot.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/simple-policy-cnx.md",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/kibana.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/architecture/design/l2-interconnect-fabric.md",
		"/Users/bmckercher/Tigera/calico-private/calico/networking/dual-tor.md",
		"/Users/bmckercher/Tigera/calico-private/calico/visibility/elastic/l7/configure.md",
		"/Users/bmckercher/Tigera/calico-private/calico/maintenance/troubleshoot/commands.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/calico-network-policy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/bgpconfig.md",
		"/Users/bmckercher/Tigera/calico-private/calico/multicluster/federation/aws.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/training/about-kubernetes-egress.md",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/navbars/threat.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/stagednetworkpolicy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/stagedglobalnetworkpolicy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/_includes/content/rule.md",
		"/Users/bmckercher/Tigera/calico-private/calico/getting-started/kubernetes/requirements.md",
		"/Users/bmckercher/Tigera/calico-private/calico/multicluster/federation/overview.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/resources/networkpolicy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/getting-started/windows-calico/limitations.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/istio.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/http-methods.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/faq.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/tutorials/app-layer-policy/enforce-policy-istio.md",
		"/Users/bmckercher/Tigera/calico-private/calico/networking/determine-best-networking.md",
		"/Users/bmckercher/Tigera/calico-private/calico/reference/dikastes/configuration.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/training/about-network-policy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/training/about-kubernetes-ingress.md",
		"/Users/bmckercher/Tigera/calico-cloud/visibility/packet-capture.md",
		"/Users/bmckercher/Tigera/calico-cloud/visibility/kibana.md",
		"/Users/bmckercher/Tigera/calico-cloud/visibility/elastic/audit-overview.md",
		"/Users/bmckercher/Tigera/calico-cloud/security/staged-network-policies.md",
		"/Users/bmckercher/Tigera/calico-cloud/compliance/overview.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/tutorials/policy-tiers.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/tutorials/networksets.md",
		"/Users/bmckercher/Tigera/calico-private/calico/_includes/content/license.md",
		"/Users/bmckercher/Tigera/calico-cloud/security/policy-impact-preview.md",
		"/Users/bmckercher/Tigera/calico-cloud/security/generate-policy-recommendation.md",
		"/Users/bmckercher/Tigera/calico-cloud/_data/versions.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/_data/versions.yml",
		"/Users/bmckercher/Tigera/calico-private/calico/compliance/encrypt-cluster-pod-traffic.md",
		"/Users/bmckercher/Tigera/calico-cloud/workload-access/enterprise-security/platform.md",
		"/Users/bmckercher/Tigera/calico-cloud/workload-access/applications/egress-controls.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/connect/connect-cluster.md",
		"/Users/bmckercher/Tigera/calico/calico/security/encrypt-cluster-pod-traffic.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/tutorials/tour.md",
		"/Users/bmckercher/Tigera/calico-private/calico/compliance/compliance-reports-cis.md",
		"/Users/bmckercher/Tigera/calico-private/calico/compliance/overview.md",
		"/Users/bmckercher/Desktop/encrypt-cluster-pod-traffic.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/tutorials/network-policy.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/tutorials/metwork-policy.md",
		"/Users/bmckercher/Tigera/calico-private/calico/maintenance/license-options.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/connect/system-requirements.md",
		"/Users/bmckercher/Tigera/calico-private/calico/security/default-deny.md",
		"/Users/bmckercher/Tigera/calico-private/.git/COMMIT_EDITMSG",
		"/Users/bmckercher/Tigera/calico-private/.git/rebase-merge/git-rebase-todo",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/connect/gke.md",
		"/Users/bmckercher/Tigera/calico-cloud/get-started/connect/aks.md"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"recommendations"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": false,
		"use_buffer2": false,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": false
	},
	"folders":
	[
		{
			"path": "/Users/bmckercher/Tigera/docs"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/bmckercher/Tigera/docs/calico-enterprise/compliance/compliance-reports-cis.mdx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10253,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/bmckercher/Tigera/docs/sidebars-calico-enterprise.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33495,
						"regions":
						{
						},
						"selection":
						[
							[
								8820,
								8835
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4091.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/bmckercher/Tigera/docs/calico-enterprise/network-policy/recommendations/index.mdx",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 331,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 408.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 339.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
